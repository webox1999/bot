import sys
from pathlib import Path
import asyncio
import logging
from aiogram import Bot, Dispatcher
from config import BOT_TOKEN
from Clients_bot.utils.auth import load_sessions
from aiogram.fsm.storage.memory import MemoryStorage
from Clients_bot.utils.storage import user_phone_numbers
from Clients_bot.utils.order_utils import initialize_orders, check_orders_status
from handlers import start, orders, garage, bonuses, buttons, admin, auth, payments, registration, ask_parts
initialized_numbers = set()

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.append(str(Path(__file__).parent))



# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
dp.include_router(start.router)
dp.include_router(orders.router)
dp.include_router(garage.router)
dp.include_router(payments.router)
dp.include_router(bonuses.router)
dp.include_router(buttons.router)
dp.include_router(admin.router)
dp.include_router(registration.router)
dp.include_router(ask_parts.router)
dp.include_router(auth.router)


async def initialize_all_orders():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–∫–∞–∑—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π."""
    sessions = load_sessions()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    initialized_numbers = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤

    for user_id, user_data in sessions.items():
        phone_number = user_data.get("phone")
        if phone_number and phone_number not in initialized_numbers:
            print(f"üìû –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è {phone_number}")
            await initialize_orders(phone_number)
            initialized_numbers.add(phone_number)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ

async def check_orders_background():
    """–§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤ –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥ (–¥–ª—è —Ç–µ—Å—Ç–∞)."""
    global initialized_numbers  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ

    while True:
        print("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤...")  # –õ–æ–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã

        sessions = load_sessions()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        if not sessions:
            print("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π!")  # –õ–æ–≥, –µ—Å–ª–∏ —Å–µ—Å—Å–∏–π –Ω–µ—Ç
            await asyncio.sleep(600)
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        for user_id, user_data in sessions.items():
            phone_number = user_data.get("phone")
            client_id = user_data.get("client_id")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º client_id –∏–∑ —Å–µ—Å—Å–∏–∏
            if phone_number and client_id and phone_number not in initialized_numbers:
                print(f"üìû –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {phone_number} (client_id: {client_id})")
                await initialize_orders(client_id, phone_number)
                initialized_numbers.add(phone_number)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
        for user_id, user_data in sessions.items():
            phone_number = user_data.get("phone")
            client_id = user_data.get("client_id")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º client_id –∏–∑ —Å–µ—Å—Å–∏–∏
            if phone_number and client_id:
                print(f"üìû –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è {phone_number} (client_id: {client_id})")
                await check_orders_status(client_id, phone_number, user_id, bot)

        await asyncio.sleep(600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥

async def main():

    #asyncio.create_task(initialize_all_orders())
    asyncio.create_task(check_orders_background())
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())