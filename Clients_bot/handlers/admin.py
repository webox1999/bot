from Clients_bot.handlers.start import *
import datetime
from Clients_bot.utils.admin_utils import load_admins, save_admins, is_admin
from Clients_bot.handlers.auth import load_sessions

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
@router.message(Command("add_admin"))
async def add_admin(message: Message):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    try:
        new_admin_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        return await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin [TG ID]")

    admins = load_admins()
    if new_admin_id in admins:
        return await message.answer("‚úÖ –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.")

    admins.append(new_admin_id)
    save_admins(admins)
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã.")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
@router.message(Command("remove_admin"))
async def remove_admin(message: Message):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    try:
        admin_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        return await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_admin [TG ID]")

    admins = load_admins()
    if admin_id not in admins:
        return await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.")

    admins.remove(admin_id)
    save_admins(admins)
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} —É–¥–∞–ª—ë–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤.")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤
@router.message(Command("who_online"))
async def who_online(message: Message):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    admins = load_admins()
    if not admins:
        return await message.answer("üìå –í —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç.")

    admins_list = "\n".join([str(a) for a in admins])
    await message.answer(f"üìå –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n{admins_list}")



# –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞, –ø–æ–∫–∞ –±–µ–∑ –ë–î)
@router.message(Command("check_phone"))
async def check_phone(message: Message):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    try:
        phone_number = message.text.split()[1]
    except IndexError:
        return await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /check_phone [–Ω–æ–º–µ—Ä]")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cleaned_phone_number = clean_phone_number(phone_number)
    user_phone_numbers[message.from_user.id] = cleaned_phone_number
    await process_phone(message, cleaned_phone_number)


@router.message(Command("users_online"))
async def users_online(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    sessions = load_sessions()
    if not sessions:
        return await message.answer("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    online_users = []
    now = datetime.datetime.now()

    for tg_id, data in sessions.items():
        phone = data.get("phone", "–ù–µ —É–∫–∞–∑–∞–Ω")
        name = data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç")
        client_id = data.get("client_id", "–ù–µ —É–∫–∞–∑–∞–Ω")
        tg_name = data.get("full_name_tg", "–ò–º—è –≤ —Ç–≥ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        username = data.get("username", "–ù–µ —É–∫–∞–∑–∞–Ω")
        last_active = data.get("last_active", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")  # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if isinstance(last_active, str):
            try:
                last_active = datetime.datetime.strptime(last_active, "%Y-%m-%d %H:%M:%S")
            except ValueError:
                last_active = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        if isinstance(last_active, datetime.datetime):
            time_diff = now - last_active
            last_active_text = f"{time_diff.seconds // 60} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥" if time_diff.seconds < 3600 else f"{time_diff.days} –¥–Ω. –Ω–∞–∑–∞–¥"
        else:
            last_active_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        online_users.append(f"üë§ {name} | TG {tg_name} \nüì± {phone} | Client ID {client_id} \nü§ñ Username: {username} \n‚è≥ –ë—ã–ª –∞–∫—Ç–∏–≤–µ–Ω: {last_active_text}\n")

    # –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
    response_text = "üìå *–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n" + "\n".join(online_users)
    await message.answer(response_text, parse_mode="Markdown")

