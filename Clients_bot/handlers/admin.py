from Clients_bot.handlers.start import *
import datetime
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from Clients_bot.utils.admin_utils import load_admins, save_admins, is_admin,update_change_request, get_change_requests, get_client_id_by_request_id, get_new_users
from Clients_bot.handlers.auth import load_sessions
from Clients_bot.utils.storage import load_part_requests, save_part_requests
from Clients_bot.utils.auth import bind_phone_to_user, save_sessions, delete_phone_from_db
from Clients_bot.filters import IsAuthenticated
from Clients_bot.handlers.keyboards import admin_keyboard, admin_request_kb, admin_parts_request_kb, admin_change_request_kb

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

@router.message(Command("admin"), IsAuthenticated())
@router.message(F.text == "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", IsAuthenticated())
async def admin_panel(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    """–í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é –∞–¥–º–∏–Ω–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
    await message.answer("üîß *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_keyboard)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
@router.message(Command("add_admin"))
async def add_admin(message: Message):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    try:
        new_admin_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        return await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin [TG ID]")

    admins = load_admins()
    if new_admin_id in admins:
        return await message.answer("‚úÖ –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.")

    admins.append(new_admin_id)
    save_admins(admins)
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã.")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
@router.message(Command("remove_admin"))
async def remove_admin(message: Message):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    try:
        admin_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        return await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_admin [TG ID]")

    admins = load_admins()
    if admin_id not in admins:
        return await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.")

    admins.remove(admin_id)
    save_admins(admins)
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} —É–¥–∞–ª—ë–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤.")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤
@router.message(Command("who_online"))
@router.message(F.text == "üëë –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤")
async def who_online(message: Message):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    admins = load_admins()
    if not admins:
        return await message.answer("üìå –í —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç.")

    admins_list = "\n".join([str(a) for a in admins])
    await message.answer(f"üìå –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n{admins_list}")



# –°–æ—Å—Ç–æ—è–Ω–∏—è
class CheckPhoneState(StatesGroup):
    waiting_for_phone = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check_phone –∏ —Ç–µ–∫—Å—Ç–∞ "üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"
@router.message(Command("check_phone"))
@router.message(F.text == "üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
async def check_phone(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –∫–∞–∫ /check_phone [–Ω–æ–º–µ—Ä]
    if message.text.startswith("/check_phone"):
        try:
            phone_number = message.text.split()[1]
            cleaned_phone_number = clean_phone_number(phone_number)
            await process_phone(message, cleaned_phone_number)
        except IndexError:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /check_phone [–Ω–æ–º–µ—Ä]")
        return

    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –∫–∞–∫ "üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞:")
    await state.set_state(CheckPhoneState.waiting_for_phone)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(CheckPhoneState.waiting_for_phone)
async def process_phone_input(message: Message, state: FSMContext):
    phone_number = message.text
    cleaned_phone_number = clean_phone_number(phone_number)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_phone_numbers[message.from_user.id] = cleaned_phone_number

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä
    await process_phone(message, cleaned_phone_number)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


@router.message(Command("users_online"))
@router.message(F.text == "üë• –û–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def users_online(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    sessions = load_sessions()
    if not sessions:
        return await message.answer("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    online_users = []
    now = datetime.datetime.now()

    for tg_id, data in sessions.items():
        phone = data.get("phone", "–ù–µ —É–∫–∞–∑–∞–Ω")
        name = data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç")
        client_id = data.get("client_id", "–ù–µ —É–∫–∞–∑–∞–Ω")
        tg_name = data.get("full_name_tg", "–ò–º—è –≤ —Ç–≥ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        username = data.get("username", "–ù–µ —É–∫–∞–∑–∞–Ω")
        last_active = data.get("last_active", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")  # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if isinstance(last_active, str):
            try:
                last_active = datetime.datetime.strptime(last_active, "%Y-%m-%d %H:%M:%S")
            except ValueError:
                last_active = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        if isinstance(last_active, datetime.datetime):
            time_diff = now - last_active
            last_active_text = f"{time_diff.seconds // 60} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥" if time_diff.seconds < 3600 else f"{time_diff.days} –¥–Ω. –Ω–∞–∑–∞–¥"
        else:
            last_active_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        online_users.append(f"üë§ {name} | TG {tg_name} \nüì± {phone} | Client ID {client_id} \nü§ñ Username: {username} \n‚è≥ –ë—ã–ª –∞–∫—Ç–∏–≤–µ–Ω: {last_active_text}\n")

    # –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
    response_text = "üìå *–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n" + "\n".join(online_users)
    await message.answer(response_text, parse_mode="Markdown")

@router.message(F.text == "üìú –ó–∞–ø—Ä–æ—Å—ã")
async def show_requests(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    await message.answer("*–ú–µ–Ω—é –∑–∞–ø—Ä–æ—Å–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é*", reply_markup=admin_request_kb)

@router.message(F.text == "–ó–∞–ø—Ä–æ—Å—ã –∑–∞–ø—á–∞—Å—Ç–µ–π –∫–ª–∏–µ–Ω—Ç–æ–≤")
async def show_requests(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    await message.answer("*–ú–µ–Ω—é –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞–ø—á–∞—Å—Ç–µ–π*", reply_markup=admin_parts_request_kb)

@router.message(F.text == "–ó–∞–ø—Ä–æ—Å—ã —Å–º–µ–Ω—ã –Ω–æ–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤")
async def show_requests(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    await message.answer("*–ú–µ–Ω—é –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–º–µ–Ω—ã –Ω–æ–º–µ—Ä–∞*", reply_markup=admin_change_request_kb)

@router.message(Command("requests_list"))
@router.message(F.text == "üìú –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–æ–≤")
async def show_active_requests(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –¥–µ—Ç–∞–ª–∏."""
    requests = load_part_requests()
    active_requests = [req for req in requests if req["status"] == "active"]

    if not active_requests:
        return await message.answer("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –¥–µ—Ç–∞–ª–∏.")

    text = "üì¶ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:</b>\n\n"
    for req in active_requests:
        text += (
            f"üÜî <b>–ó–∞–ø—Ä–æ—Å:</b> {req['request_id']}\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {req['name']}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {req['phone_number']}\n"
            f"üöó <b>–ê–≤—Ç–æ:</b> {req['car_info']}\n"
            f"üîç <b>–î–µ—Ç–∞–ª—å:</b> {req['part_name']}\n\n"
            f"üí¨ <b>–û—Ç–≤–µ—Ç–∏—Ç—å:</b> /answer_{req['request_id']}\n"
            f"üí¨ <b>–û—Ç–∫–ª–æ–Ω–∏—Ç—å:</b> /cancel_{req['request_id']}\n\n"
        )


    await message.answer(text, parse_mode="HTML")

class AnswerPartRequest(StatesGroup):
    waiting_for_answer = State()
    waiting_for_cancel = State()

@router.message(F.text.startswith("/answer_"))
async def start_answering_request(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å."""
    request_id = message.text.split("_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–ø—Ä–æ—Å–∞
    requests = load_part_requests()

    request = next((req for req in requests if req["request_id"] == request_id and req["status"] == "active"), None)
    if not request:
        return await message.answer("‚ö† –ó–∞–ø—Ä–æ—Å —É–∂–µ –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.update_data(request_id=request_id)
    await state.set_state(AnswerPartRequest.waiting_for_answer)
    await message.answer(f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å ¬´{request['part_name']}¬ª –æ—Ç {request['name']}:")

@router.message(AnswerPartRequest.waiting_for_answer)
async def process_answer(message: types.Message, state: FSMContext, bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞."""
    admin_answer = message.text
    data = await state.get_data()
    request_id = data["request_id"]

    requests = load_part_requests()
    request = next((req for req in requests if req["request_id"] == request_id), None)

    if not request:
        return await message.answer("‚ö† –û—à–∏–±–∫–∞! –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º
    client_message = (
        f"üì¶ <b>–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å:</b>\n"
        f"üîπ {request['part_name']}\n"
        f"üì© <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b> {admin_answer}"
    )
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
    request["status"] = "answered"
    request["answer"] = admin_answer
    save_part_requests(requests)
    await bot.send_message(request["user_id"], client_message, parse_mode="HTML")

    await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É.", reply_markup=admin_keyboard)
    await state.clear()

@router.message(F.text.startswith("/cancel_"))
async def start_answering_request(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å."""
    request_id = message.text.split("_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–ø—Ä–æ—Å–∞
    requests = load_part_requests()

    request = next((req for req in requests if req["request_id"] == request_id and req["status"] == "active"), None)
    if not request:
        return await message.answer("‚ö† –ó–∞–ø—Ä–æ—Å —É–∂–µ –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.update_data(request_id=request_id)
    await state.set_state(AnswerPartRequest.waiting_for_cancel)
    await message.answer(f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: ¬´{request['part_name']}¬ª –æ—Ç {request['name']}:")

@router.message(AnswerPartRequest.waiting_for_cancel)
async def process_closing(message: types.Message, state: FSMContext, bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞."""
    admin_answer = message.text
    data = await state.get_data()
    request_id = data["request_id"]

    requests = load_part_requests()
    request = next((req for req in requests if req["request_id"] == request_id), None)

    if not request:
        return await message.answer("‚ö† –û—à–∏–±–∫–∞! –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")



    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º
    client_message = (
        f"üì¶ <b>–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω:</b>\n"
        f"üîπ {request['part_name']}\n"
        f"üì© <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b> {admin_answer}"
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
    request["status"] = "closed"
    request["answer"] = admin_answer
    save_part_requests(requests)

    await bot.send_message(request["user_id"], client_message, parse_mode="HTML")

    await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É.", reply_markup=admin_keyboard)
    await state.clear()

@router.message(Command("requests_history"))
@router.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤")
async def show_request_history(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."""
    requests = load_part_requests()
    answered_requests = [req for req in requests if req["status"] in ["answered", "closed"]]

    if not answered_requests:
        return await message.answer("üìÇ –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")

    text = "üìÇ <b>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:</b>\n\n"
    for req in answered_requests:
        text += (
            f"üÜî <b>–ó–∞–ø—Ä–æ—Å:</b> {req['request_id']}\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {req['name']}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {req['phone_number']}\n"
            f"üöó <b>–ê–≤—Ç–æ:</b> {req['car_info']}\n"
            f"üîç <b>–î–µ—Ç–∞–ª—å:</b> {req['part_name']}\n\n"
            f"üí¨ <b>–°—Ç–∞—Ç—É—Å:</b> {req['status']}\n"
            f"üí¨ <b>–û—Ç–≤–µ—Ç:</b> {req['answer']}\n\n"

        )

    await message.answer(text, parse_mode="HTML")

@router.message(Command("request_change"))
@router.message(F.text == "üìú –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–æ–≤(–°–º–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞)")
async def show_active_requests(message: Message):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–º–µ–Ω—É –Ω–æ–º–µ—Ä–∞."""
    active_requests = get_change_requests(status="active")

    if not active_requests:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–º–µ–Ω—É –Ω–æ–º–µ—Ä–∞.")
        return

    for req in active_requests:
        await message.answer(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {req['name']}, ID: {req['client_id']}\n"
            f"–ù–æ–º–µ—Ä: {req['current_phone']}\n"
            f"–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä: {req['new_phone']}\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å: /confirm_change_{req['id']}\n"
            f"–û—Ç–∫–ª–æ–Ω–∏—Ç—å: /decline_change_{req['id']}"
        )

@router.message(Command("history_change"))
@router.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤(–°–º–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞)")
async def show_history_requests(message: Message):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–º–µ–Ω—É –Ω–æ–º–µ—Ä–∞."""
    history_requests = get_change_requests()
    history_requests = [req for req in history_requests if req["status"] in ["done", "decline"]]

    if not history_requests:
        await message.answer("–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–º–µ–Ω—É –Ω–æ–º–µ—Ä–∞.")
        return

    for req in history_requests:
        await message.answer(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {req['name']}, ID: {req['client_id']}\n"
            f"–ù–æ–º–µ—Ä: {req['current_phone']}\n"
            f"–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä: {req['new_phone']}\n"
            f"–°—Ç–∞—Ç—É—Å: {req['status']}"
        )

@router.message(F.text.startswith("/confirm_change_"))
async def confirm_change_request(message: Message,bot):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –Ω–æ–º–µ—Ä–∞."""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º request_id –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    request_id = message.text.split("_")[-1]

    if not request_id:
        await message.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω ID –∑–∞–ø—Ä–æ—Å–∞.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
    update_change_request(request_id, status="done")


    # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–µ—Å—Å–∏–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    user_id = str(get_client_id_by_request_id(request_id))
    sessions = load_sessions()
    if user_id not in sessions:
        print('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏')
    else:
        del sessions[user_id]
        save_sessions(sessions)
        delete_phone_from_db(user_id)



    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä

    requests = get_change_requests()
    for req in requests:
        if req["id"] == request_id:
            bind_phone_to_user(req["client_id"], req["new_phone"])
            client_message = (
                f"üì¶ <b>–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –Ω–æ–º–µ—Ä–∞ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</b>\n"
                f"–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {req['new_phone']}"
            )
            await message.answer(f"‚úÖ –ó–∞–ø—Ä–æ—Å {request_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ù–æ–º–µ—Ä –∏–∑–º–µ–Ω–µ–Ω.")
            await bot.send_message(req["client_id"], client_message, parse_mode="HTML")
            break

@router.message(F.text.startswith("/decline_change_"))
async def decline_change_request(message: Message, bot):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –Ω–æ–º–µ—Ä–∞."""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º request_id –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    request_id = message.text.split("_")[-1]

    if not request_id:
        await message.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω ID –∑–∞–ø—Ä–æ—Å–∞.")
        return
    client_message = (
        f"üì¶ <b>–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –Ω–æ–º–µ—Ä–∞ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n"
    )
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
    update_change_request(request_id, status="decline")
    requests = get_change_requests()
    for req in requests:
        if req["id"] == request_id:
            await bot.send_message(req["client_id"], client_message, parse_mode="HTML")
            break

@router.message(Command("new_users"))
@router.message(F.text == "üë§ –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã")
async def show_new_users(message: Message):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–º–µ–Ω—É –Ω–æ–º–µ—Ä–∞."""
    show_users = get_new_users()

    if not show_users:
        await message.answer("–ù–µ—Ç –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return

    for req in show_users:
        if isinstance(req, dict):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ req ‚Äî —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
            await message.answer(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {req['name']}, ID: {req['client_id']}\n"
                f"–ù–æ–º–µ—Ä: {req['phone']}\n"
                f"–ò–º—è –≤ –¢–ì: {req['tg_name']}\n"
                f"Telegram ID: {req['tg_id']}"
            )
        else:
            print(f"–û—à–∏–±–∫–∞: req –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º. –¢–∏–ø req: {type(req)}")