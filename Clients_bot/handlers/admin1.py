from aiogram import Router, F
from aiogram.types import Message
import aiohttp
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from Clients_bot.utils.helpers import get_default_dates
from Clients_bot.utils.admin_utils import is_admin
from Clients_bot.handlers.keyboards import admin_keyboard, choose_metod_kb
from Clients_bot.config import API_URL
from Clients_bot.utils.helpers import clean_phone_number
from Clients_bot.utils.messaging import send_to_all,load_codes,save_codes,delete_code_from_profile
from datetime import datetime, timedelta

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()


async def get_profit_user(phone_number):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–∞–ª–æ–≤—É—é –ø—Ä–∏–±—ã–ª—å, –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—Ü–µ–Ω–∫–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç –æ—Ç—á—ë—Ç."""
    start_date, end_date = get_default_dates()
    url = f"{API_URL}/get_profit?phone={phone_number}&start={start_date}&end={end_date}"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                sales_volume = float(data.get("sale_sum"))
                cost_price = float(data.get("dealer_sum"))
                name = data.get("name")
                client_id = data.get("client_id")
    if cost_price == 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å
        return "–û—à–∏–±–∫–∞: –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å 0"

    # –†–∞—Å—á—ë—Ç –≤–∞–ª–æ–≤–æ–π –ø—Ä–∏–±—ã–ª–∏
    gross_profit = sales_volume - cost_price

    # –†–∞—Å—á—ë—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –Ω–∞—Ü–µ–Ω–∫–∏
    markup_percentage = (gross_profit / cost_price) * 100

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞ –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    sales_volume = f"{sales_volume:,.2f}".replace(",", " ")
    cost_price = f"{cost_price:,.2f}".replace(",", " ")
    gross_profit = f"{gross_profit:,.2f}".replace(",", " ")
    markup_percentage = f"{markup_percentage:.2f} %"

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    result = (
        f"üìä <b>–†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏ –ø–æ –∫–ª–∏–µ–Ω—Ç—É</b>\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {name} | üÜî <b>ID:</b> {client_id}\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üí∞ 1Ô∏è‚É£ <b>–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂:</b> {sales_volume} ‚ÇΩ\n"
        f"üìâ 2Ô∏è‚É£ <b>–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–Ω–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏:</b> {cost_price} ‚ÇΩ\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üìà 3Ô∏è‚É£ <b>–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—Ü–µ–Ω–∫–∏:</b> {markup_percentage}\n"
        f"üíµ 4Ô∏è‚É£ <b>–ò—Ç–æ–≥–æ –≤–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å:</b> {gross_profit} ‚ÇΩ\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    )
    return result



class CheckProfitState(StatesGroup):
    waiting_for_profit_phone = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞



@router.message(Command("check_profit"))
@router.message(F.text == "üí≤ –î–æ—Ö–æ–¥ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞")
async def profit_from_user(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –∫–∞–∫ /check_phone [–Ω–æ–º–µ—Ä]
    if message.text.startswith("/check_profit"):
        try:
            phone_number = message.text.split()[1]
            cleaned_phone_number = clean_phone_number(phone_number)
            await get_profit_user(cleaned_phone_number)
        except IndexError:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /check_profit [–Ω–æ–º–µ—Ä]")
        return

    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –∫–∞–∫ "üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞:")
    await state.set_state(CheckProfitState.waiting_for_profit_phone)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(CheckProfitState.waiting_for_profit_phone)
async def process_phone_input(message: Message, state: FSMContext):
    phone_number = message.text
    cleaned_phone_number = clean_phone_number(phone_number)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä
    profit_message = await get_profit_user(cleaned_phone_number)
    print(profit_message)
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await message.answer(profit_message, parse_mode="HTML", reply_markup=admin_keyboard)


class SendMessageState(StatesGroup):
    waiting_for_message = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞
    waiting_for_percent = State()
    waiting_for_code = State()

@router.message(Command("send"))
@router.message(F.text == "üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
async def choose_metod_message(message: Message):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', reply_markup=choose_metod_kb)

@router.message(Command("send_all_discount"))
@router.message(F.text == "üè∑ –°–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —Å –∫—É–ø–æ–Ω–æ–º")
async def send_for_all_discount(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    text = (
            "‚ö† –í–Ω–∏–º–∞–Ω–∏–µ! –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "üìå **–ü—Ä–∏–º–µ—Ä:** `5-7`\n"
            "üîπ 5% —Å–∫–∏–¥–∫–∞, –¥–µ–π—Å—Ç–≤—É–µ—Ç 7 –¥–Ω–µ–π."
        )
    await message.answer(text)
    await state.set_state(SendMessageState.waiting_for_percent)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è

@router.message(SendMessageState.waiting_for_percent)
async def process_percent_input(message: Message, state: FSMContext):
    validity = message.text.split("-")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–ø—Ä–æ—Å–∞
    percent = message.text.split("-")[0]

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(percent=percent, validity=validity)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º:")
    await state.set_state(SendMessageState.waiting_for_message)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è

@router.message(SendMessageState.waiting_for_message)
async def process_text_input_discount(message: Message, state: FSMContext, bot):
    text = message.text
    admin_id = message.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    percent = data.get('percent')
    validity = data.get('validity')

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
    await send_to_all(bot, admin_id, text, percent, validity)


@router.message(Command("send_all"))
@router.message(F.text == "üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º")
async def send_for_all(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º:")
    await state.set_state(SendMessageState.waiting_for_message)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è

@router.message(SendMessageState.waiting_for_message)
async def process_text_input(message: Message, state: FSMContext, bot):
    text = message.text
    admin_id = message.from_user.id

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
    await send_to_all(bot, admin_id, text)

@router.message(Command("use_code"))
@router.message(F.text == "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω")
async def send_for_all(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã–π –∫–ª–∏–µ–Ω—Ç–æ–º:")
    await state.set_state(SendMessageState.waiting_for_code)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è

@router.message(SendMessageState.waiting_for_code)
async def process_code_input(message: Message, state: FSMContext, bot):
    code_from_admin = message.text


    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
    await check_code(message, code_from_admin)


async def check_code(message: Message, code):
    data_code = load_codes()

    # –ù–∞–π–¥–µ–º –∫–æ–¥ –≤ JSON
    request = next((req for req in data_code if req["sale_code"] == code), None)

    # –ï—Å–ª–∏ –∫–æ–¥–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ
    if not request:
        return await message.answer("‚ö† –ö–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ.")

    # –ï—Å–ª–∏ –∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
    if request["status"] == "used":
        return await message.answer(
            f"‚ö† –≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!\n"
            f"üìÖ –î–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {request['date']}."
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞
    code_date = datetime.strptime(request["date"], "%Y-%m-%d %H:%M:%S")
    validity_days = request.get("validity", 0)  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª-–≤–æ –¥–Ω–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)
    expiry_date = code_date + timedelta(days=validity_days)

    if datetime.now() > expiry_date:
        request["status"] = "expired"
        save_codes(data_code)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        return await message.answer(
            f"‚ö† –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —ç—Ç–æ–≥–æ –∫–æ–¥–∞ –∏—Å—Ç—ë–∫.\n"
            f"‚è≥ –ò—Å—Ç–µ–∫: {expiry_date.strftime('%Y-%m-%d %H:%M:%S')}"
        )

    # –ï—Å–ª–∏ –∫–æ–¥ –∞–∫—Ç–∏–≤–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    text = (
        f"üéü **–°–∫–∏–¥–æ—á–Ω—ã–π –∫—É–ø–æ–Ω**\n"
        f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–¥–∞: {request['date']}\n"
        f"üë®‚Äçüíª –ö–µ–º –±—ã–ª —Å–æ–∑–¥–∞–Ω: {request['admin']}\n"
        f"üë§ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {request['name']}\n"
        f"üí∞ –°–∫–∏–¥–∫–∞: {request['percent']}%\n\n"
        f"‚úÖ **–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!**"
    )

    request["status"] = "used"
    request["used_date"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    client_id = request.get('client_id')
    await delete_code_from_profile(client_id, code)  # –£–¥–∞–ª—è–µ–º –∫—É–ø–æ–Ω —É –∫–ª–∏–µ–Ω—Ç–∞
    save_codes(data_code)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JSON
    await message.answer(text)
