from aiogram import Router, F
from aiogram.types import Message
import aiohttp
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from Clients_bot.utils.helpers import get_default_dates
from Clients_bot.utils.admin_utils import is_admin
from Clients_bot.handlers.keyboards import admin_keyboard
from Clients_bot.config import API_URL
from Clients_bot.utils.helpers import clean_phone_number

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()


async def get_profit_user(phone_number):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–∞–ª–æ–≤—É—é –ø—Ä–∏–±—ã–ª—å, –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—Ü–µ–Ω–∫–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç –æ—Ç—á—ë—Ç."""
    start_date, end_date = get_default_dates()
    url = f"{API_URL}/get_profit?phone={phone_number}&start={start_date}&end={end_date}"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                sales_volume = float(data.get("sale_sum"))
                cost_price = float(data.get("dealer_sum"))
                name = data.get("name")
                client_id = data.get("client_id")
    if cost_price == 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å
        return "–û—à–∏–±–∫–∞: –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å 0"

    # –†–∞—Å—á—ë—Ç –≤–∞–ª–æ–≤–æ–π –ø—Ä–∏–±—ã–ª–∏
    gross_profit = sales_volume - cost_price

    # –†–∞—Å—á—ë—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –Ω–∞—Ü–µ–Ω–∫–∏
    markup_percentage = (gross_profit / cost_price) * 100

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞ –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    sales_volume = f"{sales_volume:,.2f}".replace(",", " ")
    cost_price = f"{cost_price:,.2f}".replace(",", " ")
    gross_profit = f"{gross_profit:,.2f}".replace(",", " ")
    markup_percentage = f"{markup_percentage:.2f} %"

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    result = (
        f"üìä <b>–†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏ –ø–æ –∫–ª–∏–µ–Ω—Ç—É</b>\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {name} | üÜî <b>ID:</b> {client_id}\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üí∞ 1Ô∏è‚É£ <b>–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂:</b> {sales_volume} ‚ÇΩ\n"
        f"üìâ 2Ô∏è‚É£ <b>–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–Ω–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏:</b> {cost_price} ‚ÇΩ\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üìà 3Ô∏è‚É£ <b>–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—Ü–µ–Ω–∫–∏:</b> {markup_percentage}\n"
        f"üíµ 4Ô∏è‚É£ <b>–ò—Ç–æ–≥–æ –≤–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å:</b> {gross_profit} ‚ÇΩ\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    )
    return result



class CheckProfitState(StatesGroup):
    waiting_for_profit_phone = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞



@router.message(Command("check_profit"))
@router.message(F.text == "üí≤ –î–æ—Ö–æ–¥ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞")
async def profit_from_user(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –∫–∞–∫ /check_phone [–Ω–æ–º–µ—Ä]
    if message.text.startswith("/check_profit"):
        try:
            phone_number = message.text.split()[1]
            cleaned_phone_number = clean_phone_number(phone_number)
            await get_profit_user(cleaned_phone_number)
        except IndexError:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /check_profit [–Ω–æ–º–µ—Ä]")
        return

    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –∫–∞–∫ "üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞:")
    await state.set_state(CheckProfitState.waiting_for_profit_phone)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(CheckProfitState.waiting_for_profit_phone)
async def process_phone_input(message: Message, state: FSMContext):
    phone_number = message.text
    cleaned_phone_number = clean_phone_number(phone_number)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä
    profit_message = await get_profit_user(cleaned_phone_number)
    print(profit_message)
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await message.answer(profit_message, parse_mode="HTML", reply_markup=admin_keyboard)


