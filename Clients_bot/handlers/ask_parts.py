from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from Clients_bot.utils.storage import user_phone_numbers
from Clients_bot.handlers.keyboards import main_kb, cancel_keyboard, unAuth_keyboard
from Clients_bot.handlers.start import get_cars, get_info
from Clients_bot.utils.messaging import send_to_admins

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–∏
class AskPartState(StatesGroup):
    waiting_for_part_name = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–∏"
@router.message(F.text == "üì¶ –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–∏")
async def ask_for_part_name(message: types.Message, state: FSMContext):
    phone_number = user_phone_numbers.get(message.from_user.id)

    if not phone_number:
        await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.", reply_markup=unAuth_keyboard)
        return
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏."""
    await state.set_state(AskPartState.waiting_for_part_name)
    await message.answer("–ï—Å–ª–∏ –≤–∞—à üöó –∞–≤—Ç–æ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥–∞—Ä–∞–∂, –¥–æ–±–∞–≤—å—Ç–µ —á—Ç–æ–±—ã –ø–æ–∏—Å–∫ –¥–µ—Ç–∞–ª–∏ –±—ã–ª —Ç–æ—á–Ω–µ–µ.\n üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ –∏  –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏:", reply_markup=cancel_keyboard)

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_part_request(message: types.Message, state: FSMContext):
    phone_number = user_phone_numbers.get(message.from_user.id)

    if not phone_number:
        await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.", reply_markup=unAuth_keyboard)
        return
    await state.clear()
    await message.answer("üîô –í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb)

client_data = []

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–∏
@router.message(StateFilter(AskPartState.waiting_for_part_name))
async def process_part_request(message: types.Message, state: FSMContext, bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É."""
    part_name = message.text.strip()
    user_id = str(message.from_user.id)
    phone_number = user_phone_numbers.get(user_id, "–ù–µ —É–∫–∞–∑–∞–Ω")
    full_name_tg = message.from_user.full_name

    # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ –∏–∑ –≥–∞—Ä–∞–∂–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    cars = await get_cars(phone_number)
    car_info = cars if cars else "üöó –ê–≤—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    client_data = get_info(phone_number)
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É
    admin_message = (
        "üì¶ <b>–ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–∏</b>\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {client_data[0]}\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç ID:</b> {client_data[1]}\n"
        f"üöó <b>–ê–≤—Ç–æ:</b> {car_info}\n"
        f"üîç <b>–ó–∞–ø—Ä–æ—Å:</b> {part_name}\n"
        f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {phone_number}"
    )

    await send_to_admins(bot, admin_message)  # ‚úÖ –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞—ë–º `bot` –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä

    # –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.", reply_markup=main_kb)
    await state.clear()



