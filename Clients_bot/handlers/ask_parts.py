from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import uuid
from Clients_bot.utils.storage import load_part_requests, save_part_requests
from Clients_bot.filters import IsAuthenticated
from Clients_bot.utils.storage import user_phone_numbers
from Clients_bot.handlers.keyboards import main_kb, cancel_keyboard_parts, unAuth_keyboard
from Clients_bot.handlers.start import get_cars_for_delete, get_info
from Clients_bot.utils.messaging import send_to_admins

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–∏
class AskPartState(StatesGroup):
    waiting_for_car_choice = State()
    waiting_for_part_name = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–∏"
@router.message(F.text == "üîç –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–∏", IsAuthenticated())
async def ask_for_car_choice(message: types.Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —É –∫–ª–∏–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –¥–µ—Ç–∞–ª–∏."""
    phone_number = user_phone_numbers.get(message.from_user.id)

    if not phone_number:
        await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.", reply_markup=unAuth_keyboard)
        return
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∫–ª–∏–µ–Ω—Ç–∞ –≤—ã–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –¥–µ—Ç–∞–ª–∏."""
    user_id = str(message.from_user.id)
    phone_number = user_phone_numbers.get(user_id, "–ù–µ —É–∫–∞–∑–∞–Ω")

    # ‚úÖ –ü–æ–ª—É—á–∞–µ–º JSON-—Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ –∫–ª–∏–µ–Ω—Ç–∞
    cars = get_cars_for_delete(phone_number)

    if not cars:
        await state.update_data(car_info="üöó –ê–≤—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        return await ask_for_part_name(message, state)  # ‚úÖ –ï—Å–ª–∏ –∞–≤—Ç–æ –Ω–µ—Ç, —Å—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª—å

    formatted_cars = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    car_mapping = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ ID –∞–≤—Ç–æ

    # ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω—ã
    for car_id, car_data in cars.items():
        brand = car_data.get("brand", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥") or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥"
        model = car_data.get("model", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç") or "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        vin = car_data.get("vin", "VIN –Ω–µ —É–∫–∞–∑–∞–Ω") or "VIN –Ω–µ —É–∫–∞–∑–∞–Ω"

        car_text = f"üöó {brand} {model} | {vin}"
        formatted_cars.append(car_text)
        car_mapping[car_text] = car_id  # –°–≤—è–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å ID –∞–≤—Ç–æ

    # ‚úÖ –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ 1 –∞–≤—Ç–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä
    if len(formatted_cars) == 1:
        selected_car_text = formatted_cars[0]
        selected_car_id = car_mapping[selected_car_text]
        await state.update_data(car_info=selected_car_text, car_id=selected_car_id)
        return await ask_for_part_name(message, state)

    # ‚úÖ –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–≤—Ç–æ
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=car)] for car in formatted_cars],
        resize_keyboard=True
    )

    await state.update_data(car_list=car_mapping)
    await state.set_state(AskPartState.waiting_for_car_choice)
    await message.answer("üöó –í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:", reply_markup=keyboard)

@router.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è")
async def cancel_part_request(message: types.Message, state: FSMContext):
    phone_number = user_phone_numbers.get(message.from_user.id)

    if not phone_number:
        await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.", reply_markup=unAuth_keyboard)
        return
    await state.clear()
    await message.answer("üîô –í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb(message.from_user.id))

client_data = []

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–∏
@router.message(AskPartState.waiting_for_car_choice)
async def save_car_choice(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∞–≤—Ç–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤–≤–æ–¥—É –¥–µ—Ç–∞–ª–∏."""
    data = await state.get_data()
    car_list = data.get("car_list", [])

    if message.text not in car_list:
        return await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞!")

    await state.update_data(car_info=message.text)
    await ask_for_part_name(message, state)

async def ask_for_part_name(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ."""
    await state.set_state(AskPartState.waiting_for_part_name)
    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏:", reply_markup=cancel_keyboard_parts)

@router.message(AskPartState.waiting_for_part_name)
async def process_part_request(message: types.Message, state: FSMContext, bot):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º."""

    part_name = message.text.strip()
    user_id = str(message.from_user.id)
   # phone_number = user_phone_numbers.get(user_id, "–ù–µ —É–∫–∞–∑–∞–Ω")
    full_name_tg = message.from_user.full_name
    phone = user_phone_numbers.get(message.from_user.id)
    name, client_id = get_info(phone)

    data = await state.get_data()
    car_info = data.get("car_info", "üöó –ê–≤—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")

    requests = load_part_requests()
    request_id = str(uuid.uuid4())[:8]  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∑–∞–ø—Ä–æ—Å–∞
    new_request = {
        "request_id": request_id,
        "user_id": user_id,
        "client_id": client_id,
        "phone_number": phone,
        "full_name": full_name_tg,
        "name": name,
        "part_name": part_name,
        "car_info": car_info,
        "answer": None,
        "status": "active"
    }

    requests.append(new_request)
    save_part_requests(requests)

    admin_message = (
        f"üì¶ <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–µ—Ç–∞–ª—å</b>\n"
        f"üÜî <b>–ó–∞–ø—Ä–æ—Å:</b> {request_id}\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {name} , ID: {client_id}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
        f"üöó <b>–ê–≤—Ç–æ:</b> {car_info}\n"
        f"üîç <b>–î–µ—Ç–∞–ª—å:</b> {part_name}\n\n"
        f"üí¨ <b>–û—Ç–≤–µ—Ç–∏—Ç—å:</b> /answer_{request_id}\n"
        f"üí¨ <b>–û—Ç–∫–ª–æ–Ω–∏—Ç—å:</b> /cancel_{request_id}\n"
    )

    await send_to_admins(bot, admin_message)
    await message.answer("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.", reply_markup=main_kb(message.from_user.id))
    await state.clear()




