from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import uuid
from typing import Optional
from Clients_bot.utils.admin_utils import  get_change_requests
from Clients_bot.utils.storage import load_part_requests, save_part_requests
from Clients_bot.filters import IsAuthenticated
from Clients_bot.utils.storage import user_phone_numbers,user_cars_names
from Clients_bot.handlers.keyboards import main_kb, cancel_keyboard_parts, unAuth_keyboard, my_request_kb, my_change_request_kb, my_parts_request_kb
from Clients_bot.handlers.start import get_cars_for_delete, get_info
from Clients_bot.utils.messaging import send_to_admins
from Clients_bot.utils.helpers import add_message_to_request

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–∏
class AskPartState(StatesGroup):
    waiting_for_car_choice = State()
    waiting_for_part_name = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–∏"
@router.message(F.text == "üîé –ü–æ–¥–æ–±—Ä–∞—Ç—å –∑–∞–ø—á–∞—Å—Ç—å", IsAuthenticated())
async def ask_for_car_choice(message: types.Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —É –∫–ª–∏–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –¥–µ—Ç–∞–ª–∏."""
    phone_number = user_phone_numbers.get(message.from_user.id)

    if not phone_number:
        await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.", reply_markup=unAuth_keyboard)
        return
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∫–ª–∏–µ–Ω—Ç–∞ –≤—ã–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –¥–µ—Ç–∞–ª–∏."""
    phone_number = user_phone_numbers.get(message.from_user.id)

    # ‚úÖ –ü–æ–ª—É—á–∞–µ–º JSON-—Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ –∫–ª–∏–µ–Ω—Ç–∞
    cars = get_cars_for_delete(phone_number)
    if not cars:
        await state.update_data(car_info="üöó –ê–≤—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        return await ask_for_part_name(message, state)  # ‚úÖ –ï—Å–ª–∏ –∞–≤—Ç–æ –Ω–µ—Ç, —Å—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª—å

    formatted_cars = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    car_mapping = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ ID –∞–≤—Ç–æ

    # ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω—ã
    for car_id, car_data in cars.items():
        brand = car_data.get("brand", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥")
        model = car_data.get("model", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        year = car_data.get("year", "–ì–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω")
        vin = car_data.get("vin", "VIN –Ω–µ —É–∫–∞–∑–∞–Ω")

        car_text = f"üöó {brand} {model} {year}| {vin}"
        formatted_cars.append(car_text)
        car_mapping[car_text] = car_id  # –°–≤—è–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å ID –∞–≤—Ç–æ

    # ‚úÖ –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ 1 –∞–≤—Ç–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä
    if len(formatted_cars) == 1:
        selected_car_text = formatted_cars[0]
        selected_car_id = car_mapping[selected_car_text]
        await state.update_data(car_info=selected_car_text, car_id=selected_car_id)
        return await ask_for_part_name(message, state)

    # ‚úÖ –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–≤—Ç–æ
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=car)] for car in formatted_cars],
        resize_keyboard=True
    )

    await state.update_data(car_list=car_mapping)
    await state.set_state(AskPartState.waiting_for_car_choice)
    await message.answer("üöó –í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:", reply_markup=keyboard)

@router.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è")
async def cancel_part_request(message: types.Message, state: FSMContext):
    phone_number = user_phone_numbers.get(message.from_user.id)

    if not phone_number:
        await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.", reply_markup=unAuth_keyboard)
        return
    await state.clear()
    await message.answer("üîô –í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb(message.from_user.id))

client_data = []

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–∏
@router.message(AskPartState.waiting_for_car_choice)
async def save_car_choice(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∞–≤—Ç–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤–≤–æ–¥—É –¥–µ—Ç–∞–ª–∏."""
    data = await state.get_data()
    car_list = data.get("car_list", [])

    if message.text not in car_list:
        return await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞!")

    await state.update_data(car_info=message.text)
    await ask_for_part_name(message, state)

async def ask_for_part_name(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ."""
    await state.set_state(AskPartState.waiting_for_part_name)
    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏:", reply_markup=cancel_keyboard_parts)

@router.message(AskPartState.waiting_for_part_name)
async def process_part_request(message: types.Message, state: FSMContext, bot, article: Optional[str] = None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º."""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if message.text:
        part_name = message.text.strip()
    else:
        part_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–µ—Ç–∞–ª—å"  # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç
    user_id = str(message.from_user.id)
    full_name_tg = message.from_user.full_name
    phone = user_phone_numbers.get(message.from_user.id)
    name, client_id = get_info(phone)

    data = await state.get_data()
    car_info = data.get("car_info", "üöó –ê–≤—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")

    requests = load_part_requests()
    request_id = str(uuid.uuid4())[:8]  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∑–∞–ø—Ä–æ—Å–∞
    admin_message = (
        f"üì¶ <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–µ—Ç–∞–ª—å</b>\n"
        f"üÜî <b>–ó–∞–ø—Ä–æ—Å:</b> {request_id}\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {name} , ID: {client_id}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
        f"üöó <b>–ê–≤—Ç–æ:</b> {car_info}\n"
        f"üîç <b>–î–µ—Ç–∞–ª—å:</b> {part_name}\n\n"
        f"üí¨ <b>–û—Ç–≤–µ—Ç–∏—Ç—å:</b> /answer_{request_id}\n"
        f"‚ùå <b>–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∏ –∑–∞–∫—Ä—ã—Ç—å:</b> /cancel_{request_id}\n"
    )
    if car_info == "üöó –ê–≤—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ":
        car_info = user_cars_names[message.from_user.id]
    if article:
        part_name = f'–ö–∞–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ç–æ–π –¥–µ—Ç–∞–ª–∏ {article}'
        admin_message = (
            f"üì¶ <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–µ—Ç–∞–ª—å</b>\n"
            f"üÜî <b>–ó–∞–ø—Ä–æ—Å:</b> {request_id}\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {name} , ID: {client_id}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
            f"üöó <b>–ê–≤—Ç–æ:</b> {car_info}\n"
            f"üîç <b>–î–µ—Ç–∞–ª—å:</b> {part_name}\n"
            f"üîç <b>–û—Ç–∫—Ä—ã—Ç—å –∑–∞–ø—á–∞—Å—Ç—å:</b> /show_{article}\n\n"
            f"üí¨ <b>–û—Ç–≤–µ—Ç–∏—Ç—å:</b> /answer_{request_id}\n"
            f"‚ùå <b>–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∏ –∑–∞–∫—Ä—ã—Ç—å:</b> /cancel_{request_id}\n"
        )
    new_request = {
        "request_id": request_id,
        "user_id": user_id,
        "client_id": client_id,
        "phone_number": phone,
        "full_name": full_name_tg,
        "name": name,
        "part_name": part_name,
        "car_info": car_info,
        "status": "active",
        "admin_answer": None,
        "answer": None,
        "canceled_message": None

    }

    requests.append(new_request)
    save_part_requests(requests)

    await send_to_admins(bot, admin_message)
    await message.answer("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.", reply_markup=main_kb(message.from_user.id))
    await state.clear()

class ReplyPartRequest(StatesGroup):
    waiting_for_reply = State()


@router.message(F.text.startswith("/reply_"))
async def start_replyng_request(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å."""
    request_id = message.text.split("_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–ø—Ä–æ—Å–∞
    requests = load_part_requests()

    request = next((req for req in requests if req["request_id"] == request_id and req["status"] == "active"), None)
    if not request:
        return await message.answer("‚ö† –ó–∞–ø—Ä–æ—Å —É–∂–µ –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.update_data(request_id=request_id)
    await state.set_state(ReplyPartRequest.waiting_for_reply)
    await message.answer(f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: ¬´{request['part_name']}¬ª")

@router.message(ReplyPartRequest.waiting_for_reply)
async def process_reply(message: types.Message, state: FSMContext, bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞."""
    client_reply = message.text
    data = await state.get_data()
    request_id = data["request_id"]

    requests = load_part_requests()
    request = next((req for req in requests if req["request_id"] == request_id), None)

    if not request:
        return await message.answer("‚ö† –û—à–∏–±–∫–∞! –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ê–¥–º–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º
    client_message = (
        f"üì¶ <b>–û—Ç–≤–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n"
        f"üîπ –ù–∞ –∑–∞–ø—Ä–æ—Å: {request['part_name']}\n"
        f"üì© <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:</b> {client_reply}\n\n"
        f"üí¨ <b>–û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É</b>  /answer_{request_id}\n"
        f"‚ùå <b>–ó–∞–∫—Ä—ã—Ç—å –∑–∞–ø—Ä–æ—Å</b>  /cancel_{request_id}"
    )

    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é (–ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º!)
    add_message_to_request(request_id, "client", client_reply)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await send_to_admins(bot, client_message)

    await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=main_kb(message.from_user.id))
    await state.clear()


@router.message(F.text == "üìú –ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã")
async def my_request(message: types.Message):
    await message.answer("*–ú–µ–Ω—é –∑–∞–ø—Ä–æ—Å–æ–≤*.",
                         reply_markup=my_request_kb)

@router.message(F.text == "üõí –ó–∞–ø—Ä–æ—Å—ã –∑–∞–ø—á–∞—Å—Ç–µ–π")
async def my_request(message: types.Message):
    await message.answer("*–ú–µ–Ω—é –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞–ø—á–∞—Å—Ç–µ–π*.",
                         reply_markup=my_parts_request_kb)

@router.message(F.text == "üìû –ó–∞–ø—Ä–æ—Å—ã —Å–º–µ–Ω—ã –Ω–æ–º–µ—Ä–∞")
async def my_request(message: types.Message):
    await message.answer("*–ú–µ–Ω—é –∑–∞–ø—Ä–æ—Å–æ–≤ –æ —Å–º–µ–Ω–µ –Ω–æ–º–µ—Ä–∞*.",
                         reply_markup=my_change_request_kb)

@router.message(F.text == "üìú –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã(–°–º–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞)")
async def show_my_change_requests(message: types.Message):

    phone_number = user_phone_numbers.get(message.from_user.id)
    history_requests = get_change_requests()
    history_requests = [
        req for req in history_requests
        if
        req["status"] in ["active"] and (req["current_phone"] == phone_number or req["new_phone"] == phone_number)
    ]

    if not history_requests:
        await message.answer("–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Å–º–µ–Ω—ã –Ω–æ–º–µ—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    for req in history_requests:
        await message.answer(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {req['name']}, ID: {req['client_id']}\n"
            f"–ù–æ–º–µ—Ä: {req['current_phone']}\n"
            f"–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä: {req['new_phone']}\n"
            f"–°—Ç–∞—Ç—É—Å: {req['status']}"
        )

@router.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤(–°–º–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞)")
async def show_my_change_history_requests(message: types.Message):

    phone_number = user_phone_numbers.get(message.from_user.id)
    history_requests = get_change_requests()
    history_requests = [
        req for req in history_requests
        if
        req["status"] in ["decline", "done"] and (req["current_phone"] == phone_number or req["new_phone"] == phone_number)
    ]

    if not history_requests:
        await message.answer("–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –æ —Å–º–µ–Ω–µ –Ω–æ–º–µ—Ä–∞ –ø—É—Å—Ç–∞")
        return

    for req in history_requests:
        await message.answer(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {req['name']}, ID: {req['client_id']}\n"
            f"–ù–æ–º–µ—Ä: {req['current_phone']}\n"
            f"–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä: {req['new_phone']}\n"
            f"–°—Ç–∞—Ç—É—Å: {req['status']}"
        )

@router.message(F.text == "üìå –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
async def show_my_parts_requests(message: types.Message):

    phone_number = user_phone_numbers.get(message.from_user.id)
    user_id = message.from_user.id
    history_requests = load_part_requests()
    history_requests = [
        req for req in history_requests
        if
        req["status"] in ["active"] and (req["user_id"] == user_id or req["phone_number"] == phone_number)
    ]

    if not history_requests:
        await message.answer("–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    text = "üì¶ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:</b>\n\n"

    for req in history_requests:
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–≤–µ—Ç—ã (–±–µ–∑ –∏–Ω–¥–µ–∫—Å–æ–≤)
        last_answer = req.get("answer", None)
        last_admin_answer = req.get("admin_answer", None)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ (–∫–ª—é—á "history" –∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π)
        has_history = "history" in req and req["history"]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
        last_answer_text = f"üó£ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞:</b> {last_answer}\n\n" if last_answer else ""
        last_admin_answer_text = f"üó£ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b> {last_admin_answer}\n" if last_admin_answer else ""

        text += (
            f"üÜî <b>–ó–∞–ø—Ä–æ—Å:</b> {req['request_id']}\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {req['name']}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {req['phone_number']}\n"
            f"üöó <b>–ê–≤—Ç–æ:</b> {req['car_info']}\n"
            f"üîç <b>–î–µ—Ç–∞–ª—å:</b> {req['part_name']}\n\n"
            f"{last_admin_answer_text}"
            f"{last_answer_text}"
            f"üí¨ <b>–û—Ç–≤–µ—Ç–∏—Ç—å:</b> /reply_{req['request_id']}\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é –ø–µ—Ä–µ–ø–∏—Å–∫—É", –µ—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è
        if has_history:
            text += (
                f"üìú <b>–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é –ø–µ—Ä–µ–ø–∏—Å–∫—É:</b> /details_{req['request_id']}\n"
                f"-------------------------------------------------------\n"
            )
        else:
            text += "\n"

    await message.answer(text, parse_mode="HTML")

@router.message(F.text == "üìñ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")
async def show_my_parts_history_requests(message: types.Message):

    phone_number = user_phone_numbers.get(message.from_user.id)
    user_id = message.from_user.id
    history_requests = load_part_requests()
    history_requests = [
        req for req in history_requests
        if
        req["status"] in ["answered", "closed"] and (req["user_id"] == user_id or req["phone_number"] == phone_number)
    ]

    if not history_requests:
        await message.answer("–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –æ –∑–∞–ø—Ä–æ—Å–∞—Ö –∑–∞–ø—á–∞—Å—Ç–µ–π –ø—É—Å—Ç–∞.")
        return
    text = "üì¶ <b>–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:</b>\n\n"

    for req in history_requests:
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–≤–µ—Ç—ã (–±–µ–∑ –∏–Ω–¥–µ–∫—Å–æ–≤)
        last_answer = req.get("answer", None)
        last_admin_answer = req.get("admin_answer", None)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ (–∫–ª—é—á "history" –∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π)
        has_history = "history" in req and req["history"]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
        last_answer_text = f"üó£ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞:</b> {last_answer}\n\n" if last_answer else ""
        last_admin_answer_text = f"üó£ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b> {last_admin_answer}\n" if last_admin_answer else ""

        text += (
            f"üÜî <b>–ó–∞–ø—Ä–æ—Å:</b> {req['request_id']}\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {req['name']}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {req['phone_number']}\n"
            f"üöó <b>–ê–≤—Ç–æ:</b> {req['car_info']}\n"
            f"üîç <b>–î–µ—Ç–∞–ª—å:</b> {req['part_name']}\n\n"
            f"{last_admin_answer_text}"
            f"{last_answer_text}"
            f"‚úÖ <b>–ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ:</b> {req['canceled_message']}\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é –ø–µ—Ä–µ–ø–∏—Å–∫—É", –µ—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è
        if has_history:
            text += (
                f"üìú <b>–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é –ø–µ—Ä–µ–ø–∏—Å–∫—É:</b> /details_{req['request_id']}\n"
                f"-------------------------------------------------------\n"
            )
        else:
            text += "\n"

    await message.answer(text, parse_mode="HTML")

@router.message(F.text.startswith("/details_"))
async def show_detail_request(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏."""
    request_id = message.text.split("_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–ø—Ä–æ—Å–∞

    details_requests = load_part_requests()
    request = next((req for req in details_requests if req["request_id"] == request_id), None)

    if not request:
        return await message.answer("‚ö† –ó–∞–ø—Ä–æ—Å —É–∂–µ –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = (
        f"üì¶ <b>–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∑–∞–ø—Ä–æ—Å–µ ID: {request_id}</b>\n\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {request['name']}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {request['phone_number']}\n"
        f"üöó <b>–ê–≤—Ç–æ:</b> {request['car_info']}\n"
        f"üîç <b>–î–µ—Ç–∞–ª—å:</b> {request['part_name']}\n"
        f"üìå <b>–°—Ç–∞—Ç—É—Å:</b> {request['status']}\n\n"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏—Å—Ç–æ—Ä–∏—è
    if "history" in request and request["history"]:
        text += "üìú <b>–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏:</b>\n"
        for msg in request["history"]:
            sender = f"üë§ {request['name']}" if msg["role"] == "client" else "üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä"
            text += f"{sender}: {msg['message']}\n"

    await message.answer(text, parse_mode="HTML")


