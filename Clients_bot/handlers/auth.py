import json
import os
import aiohttp
from aiogram import Router, F, types
from aiogram.types import Message
from aiogram.filters import Command
from Clients_bot.utils.helpers import clean_phone_number
from Clients_bot.utils.storage import user_phone_numbers
from Clients_bot.handlers.start import process_phone
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
from Clients_bot.handlers.keyboards import unAuth_keyboard
router = Router()

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
SESSIONS_FILE = "data/sessions.json"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äì —Å–æ–∑–¥–∞–µ–º
if not os.path.exists(SESSIONS_FILE):
    with open(SESSIONS_FILE, "w") as f:
        json.dump({"sessions": {}}, f, indent=4)


def load_sessions():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë—Ç —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
    try:
        with open(SESSIONS_FILE, "r", encoding="utf-8") as f:  # –î–æ–±–∞–≤–∏–ª–∏ encoding="utf-8"
            data = json.load(f)
            return data.get("sessions", {})  # –ï—Å–ª–∏ "sessions" –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
    except (json.JSONDecodeError, FileNotFoundError):
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON. –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Ñ–∞–π–ª.")
        save_sessions({})
        return {}



def save_sessions(sessions):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π"""
    with open(SESSIONS_FILE, "w", encoding="utf-8") as f:
        json.dump({"sessions": sessions}, f, indent=4, ensure_ascii=False)


def is_authorized(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    sessions = load_sessions()
    return str(user_id) in sessions


async def check_phone(message: Message, phone_number: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ API, –æ—á–∏—â–∞–µ—Ç –µ–≥–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Å—Å–∏—é"""
    user_id = str(message.from_user.id)
    username = message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
    full_name_tg = message.from_user.full_name  # –ò–º—è –≤ Telegram

    # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone_number = clean_phone_number(phone_number)
    user_phone_numbers[user_id] = phone_number  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä –≤ API
    api_url = f"http://45.87.153.132:8050/get_client?phone={phone_number}"
    async with aiohttp.ClientSession() as session:
        async with session.get(api_url) as response:
            try:
                data = await response.json()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {e}")
                return await message.answer("üö® –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É, –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    if data.get("error") == "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω":
        return await message.answer("‚ùå –í–∞—à –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –∫–ª–∏–µ–Ω—Ç–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
    client_id = data.get("client_id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    name = data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–µ—Å—Å–∏–∏
    sessions = load_sessions()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JSON
    sessions[user_id] = {
        "phone": phone_number,   # –û—á–∏—â–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
        "username": username,    # Telegram username
        "full_name_tg": full_name_tg,  # –ü–æ–ª–Ω–æ–µ –∏–º—è –≤ Telegram
        "client_id": client_id,  # ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ API
        "name": name  # –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã API
    }
    save_sessions(sessions)

    await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
    await process_phone(message, phone_number)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)
@router.message(F.contact)
async def get_contact_phone(message: Message):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞, –æ—á–∏—â–∞–µ—Ç –µ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤ API"""
    if not message.contact:
        return await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä.")

    phone_number = clean_phone_number(message.contact.phone_number)  # –û—á–∏—Å—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞
    user_phone_numbers[message.from_user.id] = phone_number  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

    await check_phone(message, phone_number)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ API

@router.message(Command("logout"))
async def logout_user(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /logout ‚Äì –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    user_id = str(message.from_user.id)
    sessions = load_sessions()

    if user_id not in sessions:
        return await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–π
    del sessions[user_id]
    save_sessions(sessions)

    # –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ user_phone_numbers
    if user_id in user_phone_numbers:
        removed_phone = user_phone_numbers.pop(user_id)  # –¢–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ—Ç—Å—è –∏–º–µ–Ω–Ω–æ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    await message.answer(
        "üî¥ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n\n–ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç.",
        reply_markup=unAuth_keyboard  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–Ω–æ–≤–∞
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤

@router.message()
async def handle_unauthorized(message: types.Message):
    """–≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≤–∏—Ç –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    user_id = str(message.from_user.id)

    sessions = load_sessions()
    if user_id not in sessions:
        return await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –≤—Ö–æ–¥–∞.")

