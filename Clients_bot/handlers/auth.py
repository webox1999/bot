import aiohttp
import json
from aiogram import Router, F, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from Clients_bot.utils.helpers import clean_phone_number
from Clients_bot.utils.storage import user_phone_numbers, verification_codes
from Clients_bot.handlers.start import process_phone
from Clients_bot.handlers.keyboards import unAuth_keyboard, register_keyboard, confirmation_keyboard, main_kb, approved_keyboard
from Clients_bot.utils.admin_utils import is_admin,create_change_request, load_admins
from Clients_bot.config import SERVER_URL
from Clients_bot.utils.auth import load_sessions, save_sessions, is_phone_bound, bind_phone_to_user, USERS_FILE, unbind_phone
from Clients_bot.utils.auth import generate_verification_code, send_verification_code,is_user_bound, get_phone_by_telegram_id,delete_phone_from_db





router = Router()

async def check_phone(message: Message, phone_number: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ API, –æ—á–∏—â–∞–µ—Ç –µ–≥–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Å—Å–∏—é"""
    user_id = message.from_user.id

    username = message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
    full_name_tg = message.from_user.full_name  # –ò–º—è –≤ Telegram

    # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone_number = clean_phone_number(phone_number)
    user_phone_numbers[user_id] = phone_number  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    print(f'–ü–æ–ª—É—á–∏–ª–∏ –Ω–æ–º–µ—Ä –¥–ª—è —á–µ–∫_—Ñ–æ–Ω–∞ {phone_number} –∏ {user_phone_numbers}')
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä –≤ API
    api_url = SERVER_URL + phone_number
    async with aiohttp.ClientSession() as session:
        async with session.get(api_url) as response:
            try:
                data = await response.json()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {e}")
                return await message.answer("üö® –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É, –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äì –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    if data.get("error") == "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω":
        return await message.answer(
            "üö® –í–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ. –ñ–µ–ª–∞–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?",
            reply_markup=register_keyboard
        )

    # ‚úÖ –ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω ‚Äì –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    client_id = data.get("client_id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    name = data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–µ—Å—Å–∏–∏
    sessions = load_sessions()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JSON
    sessions[user_id] = {
        "phone": phone_number,   # –û—á–∏—â–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
        "username": username,    # Telegram username
        "full_name_tg": full_name_tg,  # –ü–æ–ª–Ω–æ–µ –∏–º—è –≤ Telegram
        "client_id": client_id,  # ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ API
        "name": name  # –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã API
    }
    save_sessions(sessions)

    await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
    await process_phone(message, phone_number)


class ChangePhoneState(StatesGroup):
    waiting_for_code = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞

@router.message(F.contact)
async def get_contact_phone(message: Message, bot, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)."""
    if not message.contact:
        return await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä.")

    # –û—á–∏—Å—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞
    phone_number = clean_phone_number(message.contact.phone_number)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if is_admin(message.from_user.id):
        await message.answer("‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω (–∞–¥–º–∏–Ω).")
        await check_phone(message, phone_number)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ telegram_id –∫ –∫–∞–∫–æ–º—É-–ª–∏–±–æ –Ω–æ–º–µ—Ä—É
    if is_user_bound(message.from_user.id):
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bound_phone = get_phone_by_telegram_id(message.from_user.id)

        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º
        if bound_phone == phone_number:
            await message.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∏–¥–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞")
            await check_phone(message, phone_number)
            return
        else:
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä
            await message.answer(
                "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –Ω–æ–º–µ—Ä—É.\n"
                "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                reply_markup=approved_keyboard
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(phone_number=phone_number)
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ –Ω–æ–º–µ—Ä –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
    if is_phone_bound(message.from_user.id, phone_number):
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–º–µ–Ω—É –Ω–æ–º–µ—Ä–∞
        await message.answer(
            "‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –¥—Ä—É–≥–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ.\n"
            "–ï—Å–ª–∏ –≤—ã –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–º–µ–Ω—É.",
            reply_markup=approved_keyboard
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(phone_number=phone_number)
        return

    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –Ω–∏ –∫ –∫–æ–º—É, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if bind_phone_to_user(message.from_user.id, phone_number):
        await message.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∏–¥–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞")
        await check_phone(message, phone_number)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –Ω–æ–º–µ—Ä–∞.")


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class LogoutState(StatesGroup):
    waiting_for_confirmation = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

    @router.message(F.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
    async def confirm_account_change(message: Message, bot, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ–Ω—ã –Ω–æ–º–µ—Ä–∞."""
        data = await state.get_data()
        phone_number = data.get("phone_number")

        if not phone_number:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ –Ω–æ–º–µ—Ä –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
        with open(USERS_FILE, "r") as f:
            users_data = json.load(f)

        old_telegram_id = None
        for user_id, user_phone in users_data.items():
            if user_phone == phone_number:
                old_telegram_id = int(user_id)
                break

        if old_telegram_id:
            # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            code = generate_verification_code()
            verification_codes[phone_number] = {
                "code": code,
                "new_telegram_id": message.from_user.id
            }

            await send_verification_code(bot, old_telegram_id, code)
            await message.answer("üîê –ö–æ–¥ –¥–ª—è —Å–º–µ–Ω—ã –Ω–æ–º–µ—Ä–∞ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Ç—É—Ç.")
            await state.set_state(ChangePhoneState.waiting_for_code)
        else:
            # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–æ–≤—ã–π, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É
            client_id = message.from_user.id
            name = message.from_user.full_name
            current_phone = get_phone_by_telegram_id(client_id)

            request_id = create_change_request(client_id, current_phone, phone_number, name)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            admins = load_admins()
            for admin_id in admins:
                await bot.send_message(
                    admin_id,
                    f"–ó–∞–ø—Ä–æ—Å –æ —Å–º–µ–Ω–µ –Ω–æ–º–µ—Ä–∞:\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name}, ID: {client_id}\n"
                    f"–ù–æ–º–µ—Ä: {current_phone}\n"
                    f"–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä: {phone_number}\n"
                    f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å: /confirm_change_{request_id}\n"
                    f"–û—Ç–∫–ª–æ–Ω–∏—Ç—å: /decline_change_{request_id}"
                )

            await message.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –Ω–æ–º–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=unAuth_keyboard)
            await state.clear()

@router.message(ChangePhoneState.waiting_for_code)
async def handle_verification_code(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    user_code = message.text.strip()

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    phone_number = data.get("phone_number")

    if not phone_number:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
    user_id = str(message.from_user.id)
    sessions = load_sessions()
    if phone_number in verification_codes and user_code == verification_codes[phone_number]["code"]:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø—Ä–∏–≤—è–∑–∫—É –Ω–æ–º–µ—Ä–∞
        unbind_phone(phone_number)
        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–µ—Å—Å–∏–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        if user_id not in sessions:
            print('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Å—Å–∏–∏')
        else:
            del sessions[user_id]
            save_sessions(sessions)
            delete_phone_from_db(user_id)
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –∫ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bind_phone_to_user(message.from_user.id, phone_number)

        await message.answer("‚úÖ –ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
        del verification_codes[phone_number]  # –£–¥–∞–ª—è–µ–º –∫–æ–¥ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    await state.clear()

@router.message(F.text == "–û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_registration(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üîô –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–º–µ–Ω—É –Ω–æ–º–µ—Ä–∞.", reply_markup=unAuth_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /logout –∏ —Ç–µ–∫—Å—Ç–∞ "üö™ –í—ã–π—Ç–∏"
@router.message(Command("logout"))
@router.message(F.text == "üö™ –í—ã–π—Ç–∏")
async def logout_user(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /logout ‚Äì –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    user_id = str(message.from_user.id)
    sessions = load_sessions()

    if user_id not in sessions:
        return await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")



    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await message.answer(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?\n\n"
        "–ï—Å–ª–∏ –≤—ã –≤—ã–π–¥–µ—Ç–µ, –≤—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤.",
        reply_markup=confirmation_keyboard
    )
    await state.set_state(LogoutState.waiting_for_confirmation)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞
@router.message(LogoutState.waiting_for_confirmation)
async def confirm_logout(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    sessions = load_sessions()

    if message.text == "–î–∞":
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–π
        del sessions[user_id]
        save_sessions(sessions)

        delete_phone_from_db(user_id)
        await message.answer(
            "üî¥ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n\n–ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç.",
            reply_markup=unAuth_keyboard  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        )

        print(user_phone_numbers)
    elif message.text == "–ù–µ—Ç":
        await message.answer(
            "üö™ –í—ã—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=main_kb(message.from_user.id)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
    else:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: ‚úÖ –î–∞ –∏–ª–∏ ‚ùå –ù–µ—Ç.",
            reply_markup=confirmation_keyboard  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–Ω–æ–≤–∞
        )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤

@router.message()
async def handle_unauthorized(message: types.Message):
    """–≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≤–∏—Ç –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    user_id = str(message.from_user.id)

    sessions = load_sessions()
    if user_id not in sessions:
        return await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –≤—Ö–æ–¥–∞.", reply_markup=unAuth_keyboard)

