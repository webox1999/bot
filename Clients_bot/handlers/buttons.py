# handlers/buttons.py
from aiogram import Router, types, F
from Clients_bot.handlers.start import user_phone_numbers, logger, process_phone
from Clients_bot.handlers.orders import group_orders, show_orders_list
from Clients_bot.config import SERVER_URL
import requests

router = Router()


# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîô –ù–∞–∑–∞–¥"
@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
    phone_number = user_phone_numbers.get(message.from_user.id)

    if not phone_number:
        await message.answer("‚õî –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞.")
        return

    await process_phone(message, phone_number)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üü° –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã"
@router.message(F.text.startswith("üü° –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã"))
async def show_active_orders(message: types.Message):
    phone_number = user_phone_numbers.get(message.from_user.id)
    if not phone_number:
        await message.answer("‚õî –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞.")
        return

    try:
        response = requests.get(SERVER_URL + phone_number)
        response.raise_for_status()
        data = response.json()

        if "orders" not in data or not data["orders"]:
            await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
            return

        orders_grouped = group_orders(data["orders"])  # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã
        await show_orders_list(message, orders_grouped, only_active=True)

    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        await message.answer("‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üü¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã"
@router.message(F.text.startswith("üü¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã"))
async def show_completed_orders(message: types.Message):
    phone_number = user_phone_numbers.get(message.from_user.id)
    if not phone_number:
        await message.answer("‚õî –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞.")
        return

    try:
        response = requests.get(SERVER_URL + phone_number)
        response.raise_for_status()
        data = response.json()

        if "orders" not in data or not data["orders"]:
            await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
            return

        orders_grouped = group_orders(data["orders"])  # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã
        await show_orders_list(message, orders_grouped, only_completed=True)

    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        await message.answer("‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö.")

        #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –±–æ–Ω—É—Å–æ–≤
@router.message(F.text == "‚ú® –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –±–æ–Ω—É—Å–∞—Ö")
async def show_bonus_info(message: types.Message):
    text = (
        "‚ú® *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞—à–∞ –±–æ–Ω—É—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞?* ‚ú®\n\n"
        "üí∞ –ö–æ–ø–∏—Ç–µ –±–æ–Ω—É—Å—ã –ø—Ä–∏ –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–µ —Å–≤—ã—à–µ 1000‚ÇΩ!\n"
        "üéÅ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–Ω—É—Å—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –ª—é–±—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ.\n\n"
        "üîπ –ë–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
        "üîπ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–∫—É–ø–∫—É –º–æ–∂–Ω–æ, –µ—Å–ª–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–æ 200 –±–æ–Ω—É—Å–æ–≤ –∏ –±–æ–ª–µ–µ.\n"
        "üîπ 1 –±–æ–Ω—É—Å = 1 —Ä—É–±–ª—å —Å–∫–∏–¥–∫–∏.\n\n"
        "üõí –ü–æ–∫—É–ø–∞–π—Ç–µ, –Ω–∞–∫–∞–ø–ª–∏–≤–∞–π—Ç–µ –∏ —ç–∫–æ–Ω–æ–º—å—Ç–µ –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏! üöÄ"
    )
    await message.answer(text, parse_mode="Markdown")