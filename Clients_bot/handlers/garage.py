# handlers/garage.py
from aiogram import Router, types, F
import requests
import aiohttp
from aiogram.utils.keyboard import ReplyKeyboardMarkup, KeyboardButton
from Clients_bot.handlers.start import logger
from Clients_bot.utils.storage import user_phone_numbers
from Clients_bot.utils.helpers import get_field_value
from Clients_bot.config import SERVER_URL, API_URL
from Clients_bot.filters import IsAuthenticated
from Clients_bot.handlers.start import get_info, get_cars_for_delete
from Clients_bot.handlers.keyboards import unAuth_keyboard, garage_keyboard, cancel_keyboard_garage, yes_no_kb
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


router = Router()

async def add_car_to_garage(message: types.Message, vin_code: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç VIN-–∫–æ–¥ –Ω–∞ API –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ –≤ –≥–∞—Ä–∞–∂."""
    user_id = str(message.from_user.id)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    phone_number = user_phone_numbers.get(message.from_user.id)
    if not phone_number:
        return await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")

    # –ü–æ–ª—É—á–∞–µ–º client_id
    name, client_id = get_info(phone_number)
    if not client_id:
        return await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –∑–∞–ø—Ä–æ—Å–∞
    url = f"{API_URL}/add_car?id={client_id}&vin={vin_code}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ API
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if data.get("status") == "ok":
                    await message.answer(f"‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å VIN **{vin_code}** —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥–∞—Ä–∞–∂! üöó", reply_markup=garage_keyboard)
                    await show_garage(message)
                else:
                    await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {data.get('msg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

            else:
                await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")





# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–∞—Ä–∞–∂"

@router.message(F.text == "üöó –ì–∞—Ä–∞–∂", IsAuthenticated())
async def show_garage(message: types.Message):
    phone_number = user_phone_numbers.get(message.from_user.id)
    print(f'–ü–æ–ª—É—á–∏–ª–∏ –Ω–æ–º–µ–†–∞ –¥–ª—è –≥–∞—Ä–∞–∂–∞ {phone_number} –∏ {user_phone_numbers}')
    if not phone_number:
        await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.", reply_markup=unAuth_keyboard)
        return

    try:
        response = requests.get(SERVER_URL + phone_number)
        response.raise_for_status()
        data = response.json()

        if "cars" in data and data["cars"]:
            text = "üöó *–í–∞—à –≥–∞—Ä–∞–∂:*\n\n"
            for car in data["cars"]:
                text += (
                    f"üîπ *–ú–∞—Ä–∫–∞:* {get_field_value(car, 'auto_maker_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥')}\n"
                    f"   üöò *–ú–æ–¥–µ–ª—å:* {get_field_value(car, 'auto_model')}\n"
                    f"   üìÖ *–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:* {get_field_value(car, 'made_year')}\n"
                    f"   ‚öôÔ∏è *–î–≤–∏–≥–∞—Ç–µ–ª—å:* {get_field_value(car, 'engine_num')}\n"
                    f"   üî¢ *VIN:* {get_field_value(car, 'vin', '–ù–µ—Ç VIN')}\n\n"
                )
        else:
            text = "‚õî –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π."


        await message.answer(text, parse_mode="Markdown", reply_markup=garage_keyboard)

    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        await message.answer("‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≥–∞—Ä–∞–∂–µ.")

# –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è VIN-–∫–æ–¥–∞
class AddCarState(StatesGroup):
    waiting_for_vin = State()
    waiting_for_car = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ"
@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ", IsAuthenticated())
async def ask_for_vin(message: types.Message, state: FSMContext):
    phone_number = user_phone_numbers.get(message.from_user.id)

    if not phone_number:
        await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.", reply_markup=unAuth_keyboard)
        return
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VIN-–∫–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è."""
    await state.set_state(AddCarState.waiting_for_vin)
    await message.answer("üöó –í–≤–µ–¥–∏—Ç–µ **VIN-–∫–æ–¥** –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=cancel_keyboard_garage)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ VIN-–∫–æ–¥–∞ (–®–∞–≥ 3)
@router.message(AddCarState.waiting_for_vin)
async def process_vin_code(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç VIN-–∫–æ–¥, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ API."""
    vin_code = message.text.strip().upper()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É VIN-–∫–æ–¥–∞ (17 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(vin_code) != 17:
        return await message.answer("‚ö†Ô∏è VIN-–∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 17 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º VIN –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ API
    await state.update_data(vin=vin_code)
    await message.answer(f"‚úÖ VIN-–∫–æ–¥ **{vin_code}** –ø—Ä–∏–Ω—è—Ç. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...", reply_markup=garage_keyboard)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É: –æ—Ç–ø—Ä–∞–≤–∫–∞ VIN –≤ API (–®–∞–≥ 4)
    await add_car_to_garage(message, vin_code)




# –û–ø—Ä–µ–¥–µ–ª–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class DeleteCarState(StatesGroup):
    waiting_for_car_choice = State()
    waiting_for_car_delete_confirmation = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ"
@router.message(F.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ", IsAuthenticated())
async def choose_car(message: types.Message, state: FSMContext):
    phone_number = user_phone_numbers.get(message.from_user.id)
    if not phone_number:
        await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.", reply_markup=unAuth_keyboard)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    cars = get_cars_for_delete(phone_number)
    if not cars:
        await message.answer("üö´ –í –≤–∞—à–µ–º –≥–∞—Ä–∞–∂–µ –Ω–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=cancel_keyboard_garage)
        return

    formatted_cars = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    car_mapping = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ ID –∞–≤—Ç–æ

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω—ã
    for car_id, car_data in cars.items():
        brand = car_data.get("brand", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥") or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥"
        model = car_data.get("model", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç") or "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        vin = car_data.get("vin", "VIN –Ω–µ —É–∫–∞–∑–∞–Ω") or "VIN –Ω–µ —É–∫–∞–∑–∞–Ω"

        car_text = f"üöó {brand} {model} | {vin}"
        formatted_cars.append(car_text)
        car_mapping[car_text] = car_id  # –°–≤—è–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å ID –∞–≤—Ç–æ

    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ 1 –∞–≤—Ç–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä
    if len(formatted_cars) == 1:
        selected_car_text = formatted_cars[0]
        selected_car_id = car_mapping[selected_car_text]
        await state.update_data(car_id=selected_car_id)
        await message.answer(f"üöó –í—ã–±—Ä–∞–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {selected_car_text}", reply_markup=garage_keyboard)
        await state.set_state(DeleteCarState.waiting_for_car_delete_confirmation)
        return await confirm_car_delete(message, state)

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–≤—Ç–æ
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=car)] for car in formatted_cars],
        resize_keyboard=True
    )

    await state.update_data(car_list=car_mapping)
    await state.set_state(DeleteCarState.waiting_for_car_choice)
    await message.answer("üöó –í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
@router.message(DeleteCarState.waiting_for_car_choice)
async def process_car_choice(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    car_list = user_data.get("car_list", {})

    selected_car_text = message.text
    if selected_car_text not in car_list:
        await message.answer("üö´ –í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    selected_car_id = car_list[selected_car_text]
    await state.update_data(car_id=selected_car_id)
    await message.answer(f"üöó –í—ã–±—Ä–∞–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {selected_car_text}", reply_markup=garage_keyboard)
    await state.set_state(DeleteCarState.waiting_for_car_delete_confirmation)
    await confirm_car_delete(message, state)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
async def confirm_car_delete(message: types.Message, state: FSMContext):
    await message.answer("‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å? (–¥–∞/–Ω–µ—Ç)", reply_markup=yes_no_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@router.message(DeleteCarState.waiting_for_car_delete_confirmation)
async def process_car_delete_confirmation(message: types.Message, state: FSMContext):
    confirmation = message.text.strip().lower()
    if confirmation not in ["–¥–∞", "–Ω–µ—Ç"]:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")
        return

    if confirmation == "–Ω–µ—Ç":
        await message.answer("üöó –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=garage_keyboard)
        await state.clear()
        return

    user_data = await state.get_data()
    car_id = user_data.get("car_id")

    if not car_id:
        await message.answer("üö´ –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è.")
        await state.clear()
        return

    await delete_car_from_garage(message, car_id)
    await state.clear()

@router.message(AddCarState.waiting_for_car)
async def process_car_delete(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç VIN-–∫–æ–¥, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ API."""
    car_id = message.text.strip().upper()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º car_id –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ API
    await state.update_data(id=car_id)
    await message.answer(f"‚úÖ ID-–∞–≤—Ç–æ **{car_id}** –ø—Ä–∏–Ω—è—Ç–æ. –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...", reply_markup=garage_keyboard)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É: –æ—Ç–ø—Ä–∞–≤–∫–∞ VIN –≤ API (–®–∞–≥ 4)
    await delete_car_from_garage(message, car_id)

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ –≥–∞—Ä–∞–∂–∞
async def delete_car_from_garage(message: types.Message, car_id: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç car_id –Ω–∞ API –∏ —É–¥–∞–ª—è–µ—Ç –∞–≤—Ç–æ –∏–∑ –≥–∞—Ä–∞–∂–∞."""
    user_id = str(message.from_user.id)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    phone_number = user_phone_numbers.get(message.from_user.id)
    if not phone_number:
        return await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")

    # –ü–æ–ª—É—á–∞–µ–º client_id
    name, client_id = get_info(phone_number)
    if not client_id:
        return await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        url = f"{API_URL}/car_delete?id={car_id}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    # –£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
                    await message.answer(
                        f"‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å ID **{car_id}** —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –≥–∞—Ä–∞–∂–∞! üöó",
                        reply_markup=garage_keyboard,
                        parse_mode="Markdown"
                    )
                    await show_garage(message)
                else:
                    # –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
                    await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")






@router.message(F.text == "–û—Ç–º–µ–Ω–∞", IsAuthenticated())
async def cancel_part_request(message: types.Message, state: FSMContext):
    phone_number = user_phone_numbers.get(message.from_user.id)

    if not phone_number:
        await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.", reply_markup=unAuth_keyboard)
        return
    await state.clear()
    await message.answer("üîô –í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –ì–∞—Ä–∞–∂", reply_markup=garage_keyboard)

