from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from Clients_bot.utils.search_parts import load_parts_by_id, GOOD_BRANDS, create_parts_menu, cached_menus,PARTS_DETAILS_FILE
from Clients_bot.filters import IsAuthenticated
from Clients_bot.handlers.add_car_by_brand import add_car_by_brand
from Clients_bot.utils.storage import user_phone_numbers, user_cars_ids,user_cars_names
from Clients_bot.handlers.keyboards import unAuth_keyboard, add_info_car, main_kb
from Clients_bot.handlers.start import get_cars_for_delete, get_info, get_car_info
from Clients_bot.handlers.ask_parts import process_part_request
from Clients_bot.utils.helpers import get_parts_details,normalize_article
from Clients_bot.handlers.orders import send_long_message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
from Clients_bot.utils.matching_vin import find_modifications_by_vin
from datetime import datetime
import json
router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π
short_names = {
    "–î–µ—Ç–∞–ª–∏ –ø–æ–¥–≤–µ—Å–∫–∏ –∏ —Ä—É–ª–µ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è": "–ü–æ–¥–≤–µ—Å–∫–∞ –∏ —Ä—É–ª–µ–≤–æ–µ",
    "–ü—Ä–∏–≤–æ–¥–Ω—ã–µ —Ä–µ–º–Ω–∏, –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏–≤–æ–¥–∞ —Ä–µ–º–Ω—è": "–ü—Ä–∏–≤–æ–¥–Ω—ã–µ —Ä–µ–º–Ω–∏",
    "–ê–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä—ã, –ø—Ä—É–∂–∏–Ω—ã –∏ –∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã": "–ê–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä—ã –∏ –ø—Ä—É–∂–∏–Ω—ã",
    "–¶–µ–ø–∏ –ì–†–ú –∏ –∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã": "–ö-—Ç –ì–†–ú",
    "–°—Ç—É–ø–∏—Ü—ã, –ø–æ–¥—à–∏–ø–Ω–∏–∫–∏ —Å—Ç—É–ø–∏—Ü": "–°—Ç—É–ø–∏—Ü—ã –∏ –ø–æ–¥—à–∏–ø–Ω–∏–∫–∏",
    "–û–ø–æ—Ä—ã –¥–≤–∏–≥–∞—Ç–µ–ª—è –∏ —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏": "–û–ø–æ—Ä—ã –¥–≤–∏–≥–∞—Ç–µ–ª—è",
    "–ü—Ä–æ–∫–ª–∞–¥–∫–∏, —É–ø–ª–æ—Ç–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª—å—Ü–∞": "–ü—Ä–æ–∫–ª–∞–¥–∫–∏ –∏ –∫–æ–ª—å—Ü–∞",
    "–°—Ç–∞—Ä—Ç–µ—Ä—ã, –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã": "–°—Ç–∞—Ä—Ç–µ—Ä—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã",
    "–©–µ—Ç–∫–∏ —Å—Ç–µ–∫–ª–æ–æ—á–∏—Å—Ç–∏—Ç–µ–ª—è": "–î–≤–æ—Ä–Ω–∏–∫–∏",
    "–ì–∞–∑–æ–≤—ã–µ —É–ø–æ—Ä—ã": "–ì–∞–∑–æ–≤—ã–µ —É–ø–æ—Ä—ã"
}

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–∏
class SearchPartState(StatesGroup):
    waiting_for_car_choice = State()

@router.message(F.text == "üõ†Ô∏è –î–µ—Ç–∞–ª–∏ –¥–ª—è –¢/–û", IsAuthenticated())
@router.message(Command("parts"))
async def ask_for_car_choice(message: types.Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —É –∫–ª–∏–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –¥–µ—Ç–∞–ª–∏."""
    await message.answer('‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–µ—Ç–∞–ª–∏...')
    phone_number = user_phone_numbers.get(message.from_user.id)
    sended_from = 'user'
    name, client_id = get_info(phone_number)
    vin = 'NotAllowed'
    if not phone_number:
        await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.", reply_markup=unAuth_keyboard)
        return
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∫–ª–∏–µ–Ω—Ç–∞ –≤—ã–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –¥–µ—Ç–∞–ª–∏."""
    # ‚úÖ –ü–æ–ª—É—á–∞–µ–º JSON-—Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ –∫–ª–∏–µ–Ω—Ç–∞
    cars = get_cars_for_delete(phone_number)
    if not cars:
        await state.update_data(car_info="üöó –ê–≤—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        await message.answer('–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –≥–∞—Ä–∞–∂–µ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!')
        return await add_car_by_brand(message, vin, client_id, sended_from)  # ‚úÖ –ï—Å–ª–∏ –∞–≤—Ç–æ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ —Ä—É—á–Ω–æ–π –º–µ—Ç–æ–¥

    formatted_cars = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    car_types = []
    car_mapping = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ ID –∞–≤—Ç–æ
    car_mapping_type = {}

    # ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω—ã
    for car_id, car_data in cars.items():
        brand = car_data.get("brand", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥")
        model = car_data.get("model", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        year = car_data.get("year", "–ì–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω")
        vin = car_data.get("vin", "VIN –Ω–µ —É–∫–∞–∑–∞–Ω")
        type = car_data.get("type", "–ù–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        car_id = car_data.get("id", "ID –Ω–µ —É–∫–∞–∑–∞–Ω")
        car_text = f"üöó {brand} {model} {year}| {vin}"
        car_type = f"{type}"
        formatted_cars.append(car_text)
        car_types.append(car_type)
        car_mapping[car_text] = car_id  # –°–≤—è–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å ID –∞–≤—Ç–æ
        car_mapping_type[car_text] = car_type
        user_cars_names[message.from_user.id] = car_text


    # ‚úÖ –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ 1 –∞–≤—Ç–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä
    if len(formatted_cars) == 1:
        selected_car_text = formatted_cars[0]
        selected_car_id = car_mapping[selected_car_text]
        selected_car_type = car_mapping_type[selected_car_text]
        user_cars_names[message.from_user.id] = selected_car_text
        print(car_mapping)
        await state.update_data(car_info=selected_car_type, car_id=selected_car_id)
        data = await state.get_data()
        modification_id = data.get("car_info", [])
        car_id = data.get("car_id")
        print(car_id)
        user_cars_ids[message.from_user.id] = car_id
        info_data = get_car_info(car_id)
        car_data = info_data.get('company_car')
        if modification_id == '' or modification_id == '–ù–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏':
            message_text = (
                f"‚ö†Ô∏è *–û–π-–æ–π!* –ö–∞–∂–µ—Ç—Å—è, –≤–∞—à–µ –∞–≤—Ç–æ *{car_data.get('auto_maker_name')}*  –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ VIN-–∫–æ–¥ "
                "–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π. üòï\n\n"
                "üîß *–ß—Ç–æ –¥–µ–ª–∞—Ç—å?*\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è. üõ†\n\n"
                "üìå _–ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å—ë –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ, –ø–æ–∏—Å–∫ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º!_ üöÄ"
            )

            await message.answer(message_text, parse_mode=ParseMode.MARKDOWN, reply_markup=add_info_car)
            await state.clear()
            return

        parts = load_parts_by_id(modification_id)
        await state.clear()
        keyboard_parts = await create_category_keyboard(parts)

        return await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard_parts)
    # ‚úÖ –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–≤—Ç–æ
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
                     [KeyboardButton(text=car)] for car in formatted_cars  # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω—ã
                 ] + [
                     [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
                 ],
        resize_keyboard=True
    )

    await state.update_data(car_list=car_mapping_type, car_id=car_mapping)
    await state.set_state(SearchPartState.waiting_for_car_choice)
    await message.answer("üöó –í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π:", reply_markup=keyboard)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞—à–∏–Ω—ã
@router.message(SearchPartState.waiting_for_car_choice)
async def save_car_choice_search(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∞–≤—Ç–æ"""
    user_id = message.from_user.id
    data = await state.get_data()
    car_list = data.get("car_list", [])
    car_info = data.get("car_id", [])
    await state.update_data(car_info=message.text)
    modification_id = car_list.get(message.text)
    car_id = car_info.get(message.text)
    parts = load_parts_by_id(modification_id)
    info_data = get_car_info(car_id)
    car_data = info_data.get('company_car')

    if message.text not in car_list:
        return await message.answer("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞!")
    if modification_id == '' or modification_id == '–ù–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏':
        message_text = (
            f"‚ö†Ô∏è *–û–π-–æ–π!* –ö–∞–∂–µ—Ç—Å—è, –≤–∞—à–µ –∞–≤—Ç–æ *{car_data.get('auto_maker_name')}*  –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ VIN-–∫–æ–¥ "
            "–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π. üòï\n\n"
            "üîß *–ß—Ç–æ –¥–µ–ª–∞—Ç—å?*\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è. üõ†\n\n"
            "üìå _–ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å—ë –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ, –ø–æ–∏—Å–∫ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º!_ üöÄ"
        )
        user_cars_ids[user_id] = car_id
        await message.answer(message_text, parse_mode=ParseMode.MARKDOWN, reply_markup=add_info_car)
        await state.clear()
        return



        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏

    await state.clear()
    keyboard = await create_category_keyboard(parts)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)

# –ö–µ—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
parts_cache = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
async def create_category_keyboard(parts_list):
    builder = InlineKeyboardBuilder()
    for category_data in parts_list:
        category = category_data["category"]
        short_name = short_names.get(category, category)
        safe_callback_data = short_name.replace(" ", "_")
        parts_cache[safe_callback_data] = category_data["articles"]
        builder.button(text=short_name, callback_data=safe_callback_data)
    builder.adjust(2)
    keyboard = builder.as_markup()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –∫–µ—à–µ
    cached_menus["categories_menu"] = ("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", keyboard)

    return keyboard



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data.in_(parts_cache.keys()))  # üî• –¢–µ–ø–µ—Ä—å –ª–æ–≤–∏—Ç –¢–û–õ–¨–ö–û –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def handle_category_selection(callback: types.CallbackQuery):
    try:
        callback_data = callback.data
        print(f"Received callback_data (CATEGORY): {callback_data}")

        if callback_data in parts_cache:
            articles = parts_cache[callback_data]
            menu_text, keyboard = await create_parts_menu(articles)

            # –ö–µ—à–∏—Ä—É–µ–º –º–µ–Ω—é –∑–∞–ø—á–∞—Å—Ç–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º user_id
            cached_menus[callback.from_user.id] = (menu_text, keyboard)

            keyboard.inline_keyboard.append([types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_categories")])

            await callback.message.edit_text(menu_text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

        else:
            await callback.message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–µ—à–µ.")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_category_selection: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

    finally:
        await callback.answer()




MAX_ANALOGS = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–æ–≥–æ–≤
MAX_OE_NUMBERS = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤

@router.callback_query(F.data.startswith("show_"))
async def show_full_details(callback: types.CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—á–∞—Å—Ç–∏."""
    try:
        article = callback.data.replace("show_", "")  # –£–±–∏—Ä–∞–µ–º "show_"
        print(f"Received callback_data (DETAILS): {article}")  # –õ–æ–≥–∏—Ä—É–µ–º

        part = get_parts_details(article)

        if not part:
            await callback.message.answer("‚ùå –ê—Ä—Ç–∏–∫—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return

        name = part.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–ø—á–∞—Å—Ç—å")
        specs = part.get("specifications", {})
        specs_text = "\n".join([f"üîπ {key}: {value}" for key, value in specs.items()]) if specs else "üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
        oe_numbers = part.get("oe_numbers", [])[:MAX_OE_NUMBERS]
        oe_text = "\n".join([f"üî∏ {item['brand']}: {item['article']}" for item in oe_numbers]) if oe_numbers else "üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        if len(part.get("oe_numbers", [])) > MAX_OE_NUMBERS:
            oe_text += f"\n... –∏ –µ—â—ë {len(part['oe_numbers']) - MAX_OE_NUMBERS} –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤"

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–æ–≥–æ–≤
        analogs = part.get("analogs", [])
        filtered_analogs = [f"‚úÖ {item['brand']}: {item['article']}" for item in analogs if item["brand"] in GOOD_BRANDS][:MAX_ANALOGS]
        analogs_text = "\n".join(filtered_analogs) if filtered_analogs else "üö´ –ù–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–Ω–∞–ª–æ–≥–æ–≤"
        if len([item for item in analogs if item["brand"] in GOOD_BRANDS]) > MAX_ANALOGS:
            analogs_text += f"\n... –∏ –µ—â—ë {len([item for item in analogs if item['brand'] in GOOD_BRANDS]) - MAX_ANALOGS} –∞–Ω–∞–ª–æ–≥–æ–≤"

        image_url = part.get("images", ["https://lynxauto.info/image/trumb/400x300/no_image.jpg"])[0]

        message_text = (
            f"üîπ <b>{name}</b>\n\n"
            f"‚öô <b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>\n{specs_text}\n"
            f"üè∑Ô∏è <b>–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É:</b> /price_{normalize_article(article)}\n\n"
            f"üîç <b>–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:</b>\n{oe_text}\n\n"
            f"üîÑ <b>–ê–Ω–∞–ª–æ–≥–∏:</b> \n{analogs_text}\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "‚¨Ö –ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –¥–µ—Ç–∞–ª–µ–π
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="go_back_to_parts")
        keyboard = keyboard.as_markup()

        await callback.message.edit_media(
            media=types.InputMediaPhoto(media=image_url, caption=message_text, parse_mode="HTML"),
            reply_markup=keyboard
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ show_full_details: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")

    finally:
        await callback.answer()


@router.callback_query(F.data == "go_back_to_parts")
async def go_back_to_menu(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id

        if user_id in cached_menus:
            menu_text, keyboard = cached_menus[user_id]

            if callback.message.photo:
                await callback.message.delete()
                await callback.message.answer(menu_text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
            else:
                await callback.message.edit_text(menu_text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

        else:
            await callback.message.answer("‚ùå –ú–µ–Ω—é –∑–∞–ø—á–∞—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ go_back_to_menu: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é –∑–∞–ø—á–∞—Å—Ç–µ–π.")

    finally:
        await callback.answer()


@router.callback_query(F.data == "back_to_categories")
async def go_back_to_categories(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    try:
        if "categories_menu" in cached_menus:
            menu_text, keyboard = cached_menus["categories_menu"]

            if callback.message.photo:  # ‚úÖ –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ ‚Äì —É–¥–∞–ª—è–µ–º –µ–≥–æ
                await callback.message.delete()
                await callback.message.answer(menu_text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
            else:
                await callback.message.edit_text(menu_text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

        else:
            await callback.message.answer("‚ùå –ú–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")



    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ go_back_to_categories: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")

    finally:
        await callback.answer()


@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", IsAuthenticated())
async def add_information_car(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    phone_number = user_phone_numbers.get(message.from_user.id)
    car_id = user_cars_ids.get(message.from_user.id)
    await message.answer("–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è...", reply_markup=main_kb(user_id))
    if not phone_number:
        await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.", reply_markup=unAuth_keyboard)
        return
    car_data = get_car_info(car_id)
    name, client_id = get_info(phone_number)
    data = car_data.get('company_car')
    vin = data.get('vin')
    await add_car_by_brand(message, vin, client_id, "change", car_id)


@router.message(F.text.startswith("/show_"))
async def showing_details(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å."""
    arictle = message.text.split("_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–ø—Ä–æ—Å–∞
    print(arictle)
    part = get_parts_details(arictle)
    print(part)
    name = part.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–ø—á–∞—Å—Ç—å")
    specs = part.get("specifications", {})
    specs_text = "\n".join([f"üîπ {key}: {value}" for key, value in specs.items()]) if specs else "üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
    oe_numbers = part.get("oe_numbers", [])[:MAX_OE_NUMBERS]
    oe_text = "\n".join(
        [f"üî∏ {item['brand']}: {item['article']}" for item in oe_numbers]) if oe_numbers else "üö´ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    if len(part.get("oe_numbers", [])) > MAX_OE_NUMBERS:
        oe_text += f"\n... –∏ –µ—â—ë {len(part['oe_numbers']) - MAX_OE_NUMBERS} –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤"

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–æ–≥–æ–≤
    analogs = part.get("analogs", [])
    filtered_analogs = [f"‚úÖ {item['brand']}: {item['article']}" for item in analogs if item["brand"] in GOOD_BRANDS][
                       :MAX_ANALOGS]
    analogs_text = "\n".join(filtered_analogs) if filtered_analogs else "üö´ –ù–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–Ω–∞–ª–æ–≥–æ–≤"
    if len([item for item in analogs if item["brand"] in GOOD_BRANDS]) > MAX_ANALOGS:
        analogs_text += f"\n... –∏ –µ—â—ë {len([item for item in analogs if item['brand'] in GOOD_BRANDS]) - MAX_ANALOGS} –∞–Ω–∞–ª–æ–≥–æ–≤"

    image_url = part.get("images", ["https://lynxauto.info/image/trumb/400x300/no_image.jpg"])[0]
    if not specs_text:
        specs_text = '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ—Ç–∞–ª–∏'

    message_text = (
            f"üîπ <b>{name} {arictle}</b>\n\n"
            f"‚öô <b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>\n{specs_text}\n\n"
            f"üîç <b>–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:</b>\n{oe_text}\n\n"
            f"üîÑ <b>–ê–Ω–∞–ª–æ–≥–∏:</b>\n{analogs_text}"
        )

    await message.answer_photo(photo=image_url, caption=message_text, parse_mode="HTML")


@router.message(F.text.startswith("/price_"))
async def showing_details(message: types.Message, state: FSMContext, bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É' –∏ –≤—ã–∑—ã–≤–∞–µ—Ç process_part_request"""
    arictle = message.text.split("_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–ø—Ä–æ—Å–∞
    await message.answer(f'–£—Ç–æ—á–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {arictle}')
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ process_part_request, –ø–µ—Ä–µ–¥–∞–≤–∞—è —Å–æ–æ–±—â–µ–Ω–∏–µ
    await process_part_request(message, state, bot, arictle)

@router.message(F.text.startswith("/vin_"))
async def get_car_by_vin_info(message: types.Message, state: FSMContext, bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É' –∏ –≤—ã–∑—ã–≤–∞–µ—Ç process_part_request"""
    vin = message.text.split("_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–ø—Ä–æ—Å–∞
    await message.answer(f'–û–±—Ä–∞–±–æ—Ç–∫–∞ vin: {vin}')
    #find_modifications_by_vin(vin)
    matches = find_modifications_by_vin(vin)

    for m in matches:
        print(f"[{m['score']}‚òÖ] {m['modification']} (ID: {m['modification_id']}) ‚Äî –ü—Ä–∏—á–∏–Ω—ã: {', '.join(m['reasons'])}")


