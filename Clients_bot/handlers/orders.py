# handlers/orders.py
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime
from aiogram import Router, types, F
from Clients_bot.handlers.start import user_phone_numbers, logger
from Clients_bot.utils.delivery import calculate_delivery_date
from Clients_bot.utils.helpers import split_text
from Clients_bot.config import SERVER_URL
from Clients_bot.filters import IsAuthenticated
from Clients_bot.utils.auth import update_last_active

import requests


router = Router()
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤

def count_orders(orders):
    active_count = 0
    completed_count = 0

    for order in orders:
        status = int(order.get("status", 0))
        if status in [12, 20, 21, 25, 30, 37, 40, 41, 2, 3, 1, 10, 11]:
            active_count += 1
        elif status in [70, 101, 102, 200, 201]:
            completed_count += 1

    return active_count, completed_count

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
def get_status_text(status: int):
    status_texts = {
        70: "‚úÖ –ó–∞–∫–∞–∑ –≤—ã–¥–∞–Ω",
        101: "‚ö† –û—Ç–∫–∞–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
        102: "‚ö† –û—Ç–º–µ–Ω–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.",
        12: "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è",
        20: "üöö –ó–∞–∫–∞–∑–∞–Ω —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è –¥–æ—Å—Ç–∞–≤–∫–∞",
        21: "üöö –ó–∞–∫–∞–∑–∞–Ω —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è –¥–æ—Å—Ç–∞–≤–∫–∞",
        25: "üöö –¢–æ–≤–∞—Ä –Ω–∞ —Å–∫–ª–∞–¥–µ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞",
        30: "üöö –í –ø—É—Ç–∏ –Ω–∞ —Å–∫–ª–∞–¥",
        37: "üì¶ –¢–æ–≤–∞—Ä –ø–æ—Å—Ç—É–ø–∏–ª –Ω–∞ —Å–∫–ª–∞–¥",
        40: "üì¶ –ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ",
        41: "‚úÖ –ö–ª–∏–µ–Ω—Ç –æ–ø–æ–≤–µ—â–µ–Ω, —Ç–æ–≤–∞—Ä –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ",
        1: "üìù –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω",
        2: "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è",
        3: "üí∞ –û–ø–ª–∞—á–µ–Ω",
        10: 'üöö –ó–∞–∫–∞–∑–∞–Ω —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
        11: 'üöö –ó–∞–∫–∞–∑–∞–Ω —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
        200: 'üîÑ –û—Ñ–æ—Ä–º–ª–µ–Ω –≤–æ–∑–≤—Ä–∞—Ç',
        201: 'üîÑ –û—Ñ–æ—Ä–º–ª–µ–Ω –≤–æ–∑–≤—Ä–∞—Ç'
    }
    return status_texts.get(status, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤
async def show_order_menu(message: types.Message, active_count: int, completed_count: int):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=f"üü° –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã ({active_count})")] if active_count > 0 else [],
            [KeyboardButton(text=f"üü¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã ({completed_count})")] if completed_count > 0 else [],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

    text = (
        "üì¶ *–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:*\n\n"
        f"üîπ *–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:* {active_count} —à—Ç.\n"
        f"‚úÖ *–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:* {completed_count} —à—Ç."
    )

    if active_count == 0:
        text += "\nüòï *–£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤.*"
    if completed_count == 0:
        text += "\nüòî *–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.*"

    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

# –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã

def group_orders(orders):
    """
    –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∑–∞–∫–∞–∑—ã –ø–æ zakaz_id.
    :param orders: –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤.
    :return: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã.
    """
    orders_grouped = {}

    for order in orders:
        zakaz_id = order.get("zakaz_id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–∫–∞–∑")
        zakaz_date_str = order.get("create_date", "0000-00-00 00:00:00")
        delivery_days = order.get("time", "0")
        deliverer_id = order.get("deliverer_id", "0")
        order_cashback = order.get("cashback", 0)
        count = int(order.get("count", 1))

        try:
            zakaz_date = datetime.strptime(zakaz_date_str, "%Y-%m-%d %H:%M:%S")
            delivery_days = int(delivery_days)
            order_cashback = float(order_cashback)
        except ValueError:
            zakaz_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞"
            delivery_days = 0

        if zakaz_id not in orders_grouped:
            orders_grouped[zakaz_id] = {
                "date": zakaz_date if isinstance(zakaz_date, str) else zakaz_date.strftime("%Y-%m-%d"),
                "items": [],
                "order_price": 0,
                "statuses": set(),
                "order_cashback": 0

            }

        price = order.get("price", "0")
        try:
            price = float(price)
        except ValueError:
            price = 0

        status = int(order.get("status", 0))
        status_text = get_status_text(status)

        # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
        total_price = price * count  # –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        orders_grouped[zakaz_id]["order_price"] += total_price
        orders_grouped[zakaz_id]["statuses"].add(status)
        orders_grouped[zakaz_id]["order_cashback"] += order_cashback
        expected_delivery = ""
        if status in [12, 20, 21, 25, 30, 37, 40, 41, 2, 3, 1, 10, 11]:
            expected_delivery = calculate_delivery_date(zakaz_date_str, delivery_days, deliverer_id)

        item_text = (
            f"   \nüî∏ *{order.get('name', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}* ({order.get('article', '-')}) ‚Äî {int(price):,} ‚ÇΩ\n"
            f"      üîπ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {count}\n"
            f"      üîπ *–°—Ç–∞—Ç—É—Å:* {status_text}\n"
        ).replace(",", " ")

        if expected_delivery:
            item_text += f"      üîπ *–û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: üìÖ* {expected_delivery}\n"

        orders_grouped[zakaz_id]["items"].append(item_text)

    return orders_grouped

#–í—ã–≤–æ–¥–∏–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–∫–∞–∑—ã

async def show_orders_list(message: types.Message, orders_grouped: dict, only_active: bool = False, only_completed: bool = False):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ (–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö).
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    :param orders_grouped: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã.
    :param only_active: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã.
    :param only_completed: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã.
    """
    text = "üì¶ *–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:*\n\n"

    for zakaz_id, data in orders_grouped.items():
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if only_active and not any(status in data["statuses"] for status in [12, 20, 21, 25, 30, 37, 40, 41, 2, 3, 1, 10, 11]):
            continue
        if only_completed and not all(status == 70 for status in data["statuses"]):
            continue

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞
        text += f"üîπ *–ó–∞–∫–∞–∑ ‚Ññ{zakaz_id}* ({data['date']})\n"
        text += f"   üí∞ *–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:* {int(data['order_price']):,} ‚ÇΩ\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ–Ω—É—Å–∞—Ö –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        if only_completed:
            text += f"   üéÅ *–ù–∞—á–∏—Å–ª–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤:* {int(data['order_cashback']):,} ‚ÇΩ\n"

        text += "   üì¶ *–¢–æ–≤–∞—Ä—ã:*\n"
        for item in data["items"]:
            text += item
        text += "\n"

    if not text.strip():
        text = "‚õî –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."

    await send_long_message(message, text, parse_mode="Markdown")


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–∫–∞–∑–∞" //–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ buttons

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üì¶ –ó–∞–∫–∞–∑—ã"
@router.message(F.text == "üì¶ –ó–∞–∫–∞–∑—ã", IsAuthenticated())
async def show_orders(message: types.Message):
    logger.info("üì¶ –ö–Ω–æ–ø–∫–∞ '–ó–∞–∫–∞–∑—ã' –Ω–∞–∂–∞—Ç–∞!")

    phone_number = user_phone_numbers.get(message.from_user.id)

    if not phone_number:
        await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        return

    try:
        # –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö
        response = requests.get(SERVER_URL + phone_number)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
        data = response.json()

        if "orders" not in data or not data["orders"]:
            await message.answer(
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
                    resize_keyboard=True,
                   # one_time_keyboard=True
                )
            )
            return

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ zakaz_id
        orders_grouped = {}
        active_count = 0
        completed_count = 0
        total_completed_price = 0

        for order in data["orders"]:
            zakaz_id = order.get("zakaz_id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–∫–∞–∑")
            zakaz_date_str = order.get("create_date", "0000-00-00 00:00:00")
            delivery_days = order.get("time", "0")
            deliverer_id = order.get("deliverer_id", "0")


            try:
                zakaz_date = datetime.strptime(zakaz_date_str, "%Y-%m-%d %H:%M:%S")
                delivery_days = int(delivery_days)
            except ValueError:
                zakaz_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞"
                delivery_days = 0

            if zakaz_id not in orders_grouped:
                orders_grouped[zakaz_id] = {
                    "date": zakaz_date if isinstance(zakaz_date, str) else zakaz_date.strftime("%Y-%m-%d"),
                    "items": [],
                    "order_price": 0,
                    "statuses": set()
                }

            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏ —Å—Ç–∞—Ç—É—Å
            price = order.get("price", "0")
            try:
                price = float(price)
            except ValueError:
                price = 0

            status = int(order.get("status", 0))
            status_text = get_status_text(status)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞

            orders_grouped[zakaz_id]["order_price"] += price
            orders_grouped[zakaz_id]["statuses"].add(status)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
            expected_delivery = ""
            if status in [12, 20, 21, 25, 30, 37, 40, 41, 2, 3, 1, 10, 11]:
                expected_delivery = calculate_delivery_date(zakaz_date_str, delivery_days, deliverer_id)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–æ–≤–∞—Ä–∞
            item_text = (
                f"   \nüî∏ *{order.get('name', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}* ({order.get('article', '-')}) ‚Äî {int(price):,} ‚ÇΩ\n"
                f"      üîπ *–°—Ç–∞—Ç—É—Å:* {status_text}\n"
            ).replace(",", " ")

            if expected_delivery:
                item_text += f"      üîπ *–û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: üìÖ* {expected_delivery}\n"

            orders_grouped[zakaz_id]["items"].append(item_text)

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        for zakaz_id, data in orders_grouped.items():
            if any(status in data["statuses"] for status in [12, 20, 21, 25, 30, 37, 40, 41, 2, 3, 1, 10, 11]):
                active_count += 1
            elif all(status == 70 for status in data["statuses"]):
                completed_count += 1
                total_completed_price += data["order_price"]

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤
        await show_order_menu(message, active_count, completed_count)

    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        await message.answer("‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö.")

#–í—ã–≤–æ–¥–∏–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

async def send_long_message(message: types.Message, text: str, parse_mode: str = "Markdown"):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞—è –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏.
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    :param text: –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
    :param parse_mode: –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Markdown).
    """
    parts = split_text(text)
    for part in parts:
        await message.answer(part, parse_mode=parse_mode)