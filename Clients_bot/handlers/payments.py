from aiogram import Router, types, F
from Clients_bot.handlers.keyboards import payment_menu
from Clients_bot.config import API_URL , SERVER_URL
from Clients_bot.handlers.start import get_bonuses
from Clients_bot.handlers.keyboards import unAuth_keyboard
from Clients_bot.filters import IsAuthenticated
from Clients_bot.utils.storage import user_phone_numbers  # –•—Ä–∞–Ω–∏–º –Ω–æ–º–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
import aiohttp
from datetime import datetime, timedelta

router = Router()

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π" (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ—É –∏ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞)
@router.message(F.text == "üí≥ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", IsAuthenticated())
async def show_payment_summary(message: types.Message):
    phone_number = user_phone_numbers.get(message.from_user.id)
    if not phone_number:
        return await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –≤—Ö–æ–¥–∞.", reply_markup=unAuth_keyboard)

    # –ü–æ–ª—É—á–∞–µ–º zakaz_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_zakaz_ids = await get_user_zakaz_ids(phone_number)
    if not user_zakaz_ids:
        return await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 180 –¥–Ω–µ–π.")

    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏
    payments_data = await get_payments()
    payments = payments_data.get("payments", [])

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂–∏ –ø–æ zakaz_id
    user_payments = [p for p in payments if str(p.get("zakaz_id", "0")) in user_zakaz_ids and p.get("zakaz_id", "0") != "0"]

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π
    total_payments = sum(int(float(p["summ"])) for p in user_payments if p["payment_type"] == "1")
    total_bonuses = sum(int(float(p["summ"])) for p in user_payments if p["payment_type"] == "8")
    count_payments = sum(1 for p in user_payments if p["payment_type"] == "1")
    count_bonuses = sum(1 for p in user_payments if p["payment_type"] == "8")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    summary_text = (
        f"üìä *–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π ({count_payments} –æ–ø–µ—Ä–∞—Ü–∏–π)*\n"
        f"üí∞ *–°—É–º–º–∞:* {total_payments:,} ‚ÇΩ\n\n"
        f"üéÅ *–ò—Å—Ç–æ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤ ({count_bonuses} –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π)*\n"
        f"üí∏ *–í—Å–µ–≥–æ –±—ã–ª–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–æ:* {total_bonuses} –±–æ–Ω—É—Å–æ–≤\n"
        f"üí∞ *–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫:* {get_bonuses(phone_number)} –±–æ–Ω—É—Å–æ–≤"
    )

    await message.answer(summary_text, parse_mode="Markdown", reply_markup=payment_menu)

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–ª–∞—Ç–µ–∂–∏" (—Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏, –±–µ–∑ –±–æ–Ω—É—Å–æ–≤)
@router.message(F.text == "üíµ –ü–ª–∞—Ç–µ–∂–∏")
async def show_full_payments(message: types.Message):
    phone_number = user_phone_numbers.get(message.from_user.id)
    if not phone_number:
        return await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –≤—Ö–æ–¥–∞.")

    await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏...")

    user_zakaz_ids = await get_user_zakaz_ids(phone_number)
    payments_data = await get_payments()
    payments = payments_data.get("payments", [])

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ (–±–µ–∑ payment_type: 8)
    user_payments = [
        p for p in payments
        if str(p.get("zakaz_id", "0")) in user_zakaz_ids and p.get("zakaz_id", "0") != "0" and p["payment_type"] == "1"
    ]

    if not user_payments:
        return await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 180 –¥–Ω–µ–π.")

    # üìå –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
    user_payments.sort(key=lambda p: p.get("create_date", ""), reverse=False)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π
    payment_text = "üìä *–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π*\n\n"
    for p in user_payments:
        date = p.get("create_date", "–ù–µ—Ç –¥–∞—Ç—ã")[0:10]
        amount = int(float(p.get("summ", "0")))
        description = p.get("payment_target", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
        is_advance = p.get("is_advance") == "1"

        text = f"üìÖ {date} | {'‚úÖ' if amount > 0 else '‚ùå'} {amount:,} ‚ÇΩ | {description}"
        if is_advance:
            text = f"üìÖ {date} | {'‚úÖ' if amount > 0 else '‚ùå'} {amount:,} ‚ÇΩ | –ê–≤–∞–Ω—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ {description[14:21]}"
        payment_text += text + "\n"

    await message.answer(payment_text, parse_mode="Markdown")


# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ë–æ–Ω—É—Å—ã" (—Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã —Å–ø–∏—Å–∞–Ω–∏—è —à–ª–∏ –ø–µ—Ä–µ–¥ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è–º–∏)
@router.message(F.text == "üí∞ –ë–æ–Ω—É—Å—ã")
async def show_full_bonuses(message: types.Message):
    phone_number = user_phone_numbers.get(message.from_user.id)
    if not phone_number:
        return await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –≤—Ö–æ–¥–∞.")

    await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –±–æ–Ω—É—Å—ã...")

    user_zakaz_ids = await get_user_zakaz_ids(phone_number)
    payments_data = await get_payments()
    payments = payments_data.get("payments", [])

    # –§–∏–ª—å—Ç—Ä—É–µ–º –±–æ–Ω—É—Å–Ω—ã–µ —Å–ø–∏—Å–∞–Ω–∏—è (payment_type: 8)
    bonus_spendings = [
        p for p in payments
        if str(p.get("zakaz_id", "0")) in user_zakaz_ids and p.get("zakaz_id", "0") != "0" and p["payment_type"] == "8"
    ]

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –±–æ–Ω—É—Å–æ–≤
    orders_data = await get_orders(phone_number)
    orders = orders_data.get("orders", [])

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞–ª–∏ –∫–µ—à–±—ç–∫
    bonus_earnings = [
        o for o in orders if int(o.get("cashback", "0")) > 0
    ]

    if not bonus_spendings and not bonus_earnings:
        return await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –±–æ–Ω—É—Å–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 180 –¥–Ω–µ–π.")

    # üìå –°–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ–Ω—É—Å–Ω—ã–µ —Å–ø–∏—Å–∞–Ω–∏—è (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
    bonus_spendings.sort(key=lambda p: p.get("create_date", ""), reverse=False)

    # üìå –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
    bonus_earnings.sort(key=lambda o: o.get("create_date", ""), reverse=False)

    # üìå –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ `zakaz_id`, —á—Ç–æ–±—ã —Å–Ω–∞—á–∞–ª–∞ —à–ª–∏ —Å–ø–∏—Å–∞–Ω–∏—è, –ø–æ—Ç–æ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
    bonuses_by_order = {}

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–∞–Ω–∏—è –±–æ–Ω—É—Å–æ–≤
    for p in bonus_spendings:
        zakaz_id = p.get("zakaz_id", "–ù–µ—Ç –∑–∞–∫–∞–∑–∞")
        date = p.get("create_date", "–ù–µ—Ç –¥–∞—Ç—ã")[0:10]
        amount = int(float(p.get("summ", "0")))
        description = p.get("payment_target", "–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞")

        text = f"üìÖ {date} | ‚ùå -{amount} | –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ{zakaz_id}"

        if zakaz_id not in bonuses_by_order:
            bonuses_by_order[zakaz_id] = []
        bonuses_by_order[zakaz_id].append(text)

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤
    for o in bonus_earnings:
        zakaz_id = o.get("zakaz_id", "–ù–µ—Ç –∑–∞–∫–∞–∑–∞")
        date = o.get("create_date", "–ù–µ—Ç –¥–∞—Ç—ã")[0:10]
        amount = int(o.get("cashback", "0"))

        text = f"üìÖ {date} | ‚úÖ +{amount} | –ù–∞—á–∏—Å–ª–µ–Ω–æ –∑–∞ –∑–∞–∫–∞–∑ ‚Ññ{zakaz_id}"

        if zakaz_id not in bonuses_by_order:
            bonuses_by_order[zakaz_id] = []
        bonuses_by_order[zakaz_id].append(text)

    # üìå –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (–ø–æ `zakaz_id`, —Å–Ω–∞—á–∞–ª–∞ —Å–ø–∏—Å–∞–Ω–∏—è, –ø–æ—Ç–æ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è)
    bonus_text = "üéÅ *–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤*\n\n"
    for zakaz_id in sorted(bonuses_by_order.keys(), key=lambda x: min([t.split(" | ")[0] for t in bonuses_by_order[x]])):
        for entry in bonuses_by_order[zakaz_id]:
            bonus_text += entry + "\n"

    await message.answer(bonus_text, parse_mode="Markdown")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã 180 –º–µ—Å—è—Ü –Ω–∞–∑–∞–¥
def get_default_dates():
    end_date = datetime.now().strftime("%Y-%m-%d")
    start_date = (datetime.now() - timedelta(days=180)).strftime("%Y-%m-%d")
    return start_date, end_date

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è `zakaz_id` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user_zakaz_ids(phone_number):
    url = SERVER_URL + phone_number
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status}")
                return set()

            data = await response.json()
            #print(f"üì© –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")  # –í—ã–≤–æ–¥–∏–º JSON –≤ –∫–æ–Ω—Å–æ–ª—å

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª—é—á "orders" –∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω —Å–ø–∏—Å–∫–æ–º
            orders = data.get("orders", [])
            if not isinstance(orders, list):
                print("‚ùå –û—à–∏–±–∫–∞: 'orders' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º")
                return set()

            # –ò–∑–≤–ª–µ–∫–∞–µ–º zakaz_id, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ set
            zakaz_ids = {order["zakaz_id"] for order in orders if "zakaz_id" in order}
           # print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ zakaz_id: {zakaz_ids}")  # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç

            return zakaz_ids  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ zakaz_id

    return set()

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
async def get_payments():
    start_date, end_date = get_default_dates()
    url = f"{API_URL}/get_payments?start={start_date}&end={end_date}"
    #print(f"üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å: {url}")  # –í—ã–≤–æ–¥–∏–º URL –≤ –∫–æ–Ω—Å–æ–ª—å

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            #print(f"üì© –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")  # –í—ã–≤–æ–¥–∏–º HTTP-—Å—Ç–∞—Ç—É—Å

            if response.status == 200:
                data = await response.json()
               # print(f"üì© –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏: {data}")  # –í—ã–≤–æ–¥–∏–º JSON –≤ –∫–æ–Ω—Å–æ–ª—å
                return data  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç API

    print("‚ùå –û—à–∏–±–∫–∞: –ü–ª–∞—Ç–µ–∂–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")  # –ï—Å–ª–∏ –∫–æ–¥ != 200
    return {"history": []}

async def get_orders(phone_number):
    url = SERVER_URL + phone_number
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status != 200:
                return {"orders": []}
            return await response.json()