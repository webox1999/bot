from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import json
import os
import aiohttp
from Clients_bot.handlers.keyboards import unAuth_keyboard, phone_keyboard, Auth_keyboard
from Clients_bot.utils.helpers import clean_phone_number
from Clients_bot.handlers.start import get_cars  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤—Ç–æ
from Clients_bot.config import API_URL
from Clients_bot.utils.auth import DATA_PATH

router = Router()


# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationState(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_vin = State()


@router.message(F.text == "‚ùå –ù–µ—Ç")
async def cancel_registration(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üîô –í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=unAuth_keyboard)


@router.message(F.text == "‚úÖ –î–∞")
async def start_registration(message: types.Message, state: FSMContext):
    await state.set_state(RegistrationState.waiting_for_name)
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ **–ò–º—è –∏ –§–∞–º–∏–ª–∏—é**:")


@router.message(RegistrationState.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await state.set_state(RegistrationState.waiting_for_phone)


    await message.answer(
        "üìû –í–≤–µ–¥–∏—Ç–µ **–≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞** –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:",
        reply_markup=phone_keyboard
    )


@router.message(RegistrationState.waiting_for_phone, F.contact)
async def process_phone_contact(message: types.Message, state: FSMContext):
    phone_number = clean_phone_number(message.contact.phone_number)
    await state.update_data(phone=phone_number)
    await request_vin(message, state)


@router.message(RegistrationState.waiting_for_phone, F.text)
async def process_phone_text(message: types.Message, state: FSMContext):
    phone_number = clean_phone_number(message.text.strip())
    await state.update_data(phone=phone_number)
    await request_vin(message, state)


async def request_vin(message: types.Message, state: FSMContext):
    await state.set_state(RegistrationState.waiting_for_vin)
    await message.answer(
        "üöó –í–≤–µ–¥–∏—Ç–µ **VIN-–∫–æ–¥** –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è,–æ–Ω –¥–æ–±–∞–≤–∏—Ç—å—Å—è –≤ –≤–∞—à –ì–∞—Ä–∞–∂ –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å VIN")]],
            resize_keyboard=True
        )
    )


@router.message(F.text == "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å VIN", RegistrationState.waiting_for_vin)
async def skip_vin(message: types.Message, state: FSMContext):
    await state.update_data(vin=None)
    await register_client(message, state)


@router.message(RegistrationState.waiting_for_vin, F.text)
async def process_vin(message: types.Message, state: FSMContext):
    await state.update_data(vin=message.text.strip())
    await register_client(message, state)


async def register_client(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    name = user_data["name"]
    phone_number = user_data["phone"]
    vin = user_data["vin"] or ""

    register_url = f"{API_URL}/register_client?name={name}&phone={phone_number}&type=3&bonuses=1232&vin={vin}"

    print(f"üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:\n{register_url}")

    async with aiohttp.ClientSession() as session:
        async with session.get(register_url) as response:
            try:
                data = await response.json()
                print(f"üì© –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n{data}")  # –õ–æ–≥ –æ—Ç–≤–µ—Ç–∞ API
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
                return await message.answer("üö® –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    if "companys" in data:
        return await message.answer("‚ùå –û—à–∏–±–∫–∞: –¢–∞–∫–æ–π –∫–ª–∏–µ–Ω—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", reply_markup=unAuth_keyboard)

    if data.get("dogovor_res", {}).get("status") == "ok":
        client_id = data.get("company_id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        tg_id = message.from_user.id
        tg_name = message.from_user.full_name or "–ù–µ —É–∫–∞–∑–∞–Ω"
        await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\nüë§ {name}\nüì± {phone_number}")

        cars = await get_cars(phone_number)
        if cars:
            await message.answer(f"{cars}", reply_markup=Auth_keyboard)
        await save_new_user(tg_id, tg_name, name, phone_number, client_id)
        await state.clear()

    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª 'status': 'ok'")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def save_new_user(tg_id, tg_name, name, phone, client_id):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ new_users.json"""
    if not os.path.exists("data"):
        os.makedirs("data")

    if not os.path.exists(DATA_PATH):
        data = {"users": []}
    else:
        with open(DATA_PATH, "r", encoding="utf-8") as file:
            try:
                data = json.load(file)
            except json.JSONDecodeError:
                data = {"users": []}  # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω

    new_user = {
        "tg_id": str(tg_id),
        "tg_name": tg_name,
        "name": name,
        "phone": phone,
        "client_id": str(client_id)
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not any(user["phone"] == phone for user in data["users"]):
        data["users"].append(new_user)

        with open(DATA_PATH, "w", encoding="utf-8") as file:
            json.dump(data, file, ensure_ascii=False, indent=4)

        print(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ new_users.json: {new_user}")
    else:
        print(f"‚Ñπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {phone} —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ.")
