# handlers/start.py
from aiogram import Router, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from Clients_bot.utils.storage import user_phone_numbers
from Clients_bot.config import SERVER_URL  # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from Clients_bot.utils.helpers import clean_phone_number  # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç
import logging
import requests

# üîπ –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üöó –ì–∞—Ä–∞–∂"), KeyboardButton(text="üì¶ –ó–∞–∫–∞–∑—ã")],
        [KeyboardButton(text="üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)],
        [KeyboardButton(text="‚ú® –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –±–æ–Ω—É—Å–∞—Ö")]
    ],
    resize_keyboard=True
)

@router.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ üì≤ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç:", reply_markup=main_kb)

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∫–æ–Ω—Ç–∞–∫—Ç)
@router.message(F.text.regexp(r"^\+?\d{10,15}$"))
async def get_manual_phone(message: types.Message):
    # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    cleaned_phone_number = clean_phone_number(message.text.strip())

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_phone_numbers[message.from_user.id] = cleaned_phone_number
    await process_phone(message, cleaned_phone_number)

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤—Ä—É—á–Ω—É—é)

@router.message(F.text.regexp(r"^\+?\d{10,15}$"))
async def get_manual_phone(message: types.Message):
    phone_number = message.text.strip()
    user_phone_numbers[message.from_user.id] = phone_number  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await process_phone(message, phone_number)

# üîπ –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def process_phone(message: types.Message, phone_number: str):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä: {phone_number}")
    await message.answer(f"üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –Ω–æ–º–µ—Ä–∞: {phone_number}...")

    try:
        response = requests.get(SERVER_URL + phone_number)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
        data = response.json()
        logger.info(f"üîπ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {data}")

        text = f"‚úÖ *–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:*\n"
        text += f"üë§ *–ò–º—è:* {data.get('name', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        text += f"üí∞ *–ë–∞–ª–∞–Ω—Å:* {data.get('balance', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')} ‚ÇΩ\n"
        text += f"üí∏ *–ë–æ–Ω—É—Å—ã:* {data.get('cashback', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')} ‚ÇΩ\n"
        text += f"üìÖ *–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* {data.get('reg_date', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        text += f"üìä *–û–±–æ—Ä–æ—Ç:* {data.get('oborot', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')} ‚ÇΩ\n"

        await message.answer(text, parse_mode="Markdown", reply_markup=main_kb)

    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        await message.answer("‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É.")