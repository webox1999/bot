import json
import os
import datetime
from pathlib import Path
import random
from Clients_bot.utils.storage import user_phone_numbers

# # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# SESSIONS_FILE = "Clients_bot/data/sessions.json"
# SESSIONS_CHECKIN = Path("Clients_bot/data/sessions.json")
# DATA_PATH = "Clients_bot/data/new_users.json"
# USERS_FILE = Path("Clients_bot/data/proccessing_users.json")

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
SESSIONS_FILE = "data/sessions.json"
SESSIONS_CHECKIN = Path("data/sessions.json")
DATA_PATH = "data/new_users.json"
USERS_FILE = Path("data/proccessing_users.json")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äì —Å–æ–∑–¥–∞–µ–º
if not os.path.exists(SESSIONS_FILE):
    with open(SESSIONS_FILE, "w") as f:
        json.dump({"sessions": {}}, f, indent=4)


def load_sessions():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë—Ç —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
    try:
        with open(SESSIONS_FILE, "r", encoding="utf-8") as f:  # –î–æ–±–∞–≤–∏–ª–∏ encoding="utf-8"
            data = json.load(f)
            return data.get("sessions", {})  # –ï—Å–ª–∏ "sessions" –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
    except (json.JSONDecodeError, FileNotFoundError):
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON. –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Ñ–∞–π–ª.")
        save_sessions({})
        return {}


async def update_last_active(user_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    sessions = load_sessions()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ —Å–µ—Å—Å–∏—è—Ö, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º `last_active`
    if str(user_id) in sessions:
        sessions[str(user_id)]["last_active"] = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        save_sessions(sessions)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Å–µ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_data = sessions.get(str(user_id), {})
    phone_number = user_data.get("phone")
    client_id = user_data.get("client_id")
    name = user_data.get("name")

    if not phone_number or not client_id or not name:
        return  # ‚ùå –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ `sessions.json`, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç

    # –ï—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ `sessions.json`
    sessions[str(user_id)]["last_active"] = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    save_sessions(sessions)

def save_sessions(sessions):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π"""
    with open(SESSIONS_FILE, "w", encoding="utf-8") as f:
        json.dump({"sessions": sessions}, f, indent=4, ensure_ascii=False)


def is_authorized(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    sessions = load_sessions()
    return str(user_id) in sessions

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


def bind_phone_to_user(telegram_id: int, phone_number: str) -> bool:
    """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫ telegram_id, —É–¥–∞–ª—è—è —Å—Ç–∞—Ä—É—é –ø—Ä–∏–≤—è–∑–∫—É."""
    if not USERS_FILE.exists():
        USERS_FILE.parent.mkdir(parents=True, exist_ok=True)
        with open(USERS_FILE, "w") as f:
            json.dump({}, f)

    with open(USERS_FILE, "r") as f:
        users_data = json.load(f)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø—Ä–∏–≤—è–∑–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    unbind_phone(phone_number)

    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –∫ –Ω–æ–≤–æ–º—É telegram_id
    users_data[str(telegram_id)] = phone_number

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    with open(USERS_FILE, "w") as f:
        json.dump(users_data, f, indent=4)

    return True

def is_phone_bound(telegram_id: int, phone_number: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ –Ω–æ–º–µ—Ä –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É."""
    if not USERS_FILE.exists():
        return False

    with open(USERS_FILE, "r") as f:
        users_data = json.load(f)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ –Ω–æ–º–µ—Ä –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for user_id, user_phone in users_data.items():
        if user_phone == phone_number and user_id != str(telegram_id):
            return True

    return False

def is_user_bound(telegram_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ telegram_id –∫ –∫–∞–∫–æ–º—É-–ª–∏–±–æ –Ω–æ–º–µ—Ä—É."""
    if not USERS_FILE.exists():
        return False

    with open(USERS_FILE, "r") as f:
        users_data = json.load(f)

    return str(telegram_id) in users_data

def get_phone_by_telegram_id(telegram_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ telegram_id."""
    if not USERS_FILE.exists():
        return None

    with open(USERS_FILE, "r") as f:
        users_data = json.load(f)

    return users_data.get(str(telegram_id))

def change_phone_number(telegram_id, new_phone_number):
    if not USERS_FILE.exists():
        return False

    with open(USERS_FILE, "r") as f:
        users_data = json.load(f)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for user_id, user_phone in users_data.items():
        if user_phone == new_phone_number and user_id != str(telegram_id):
            return False

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    old_phone_number = users_data.get(str(telegram_id))
    if old_phone_number:
        unbind_phone(old_phone_number)

    # –ú–µ–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users_data[str(telegram_id)] = new_phone_number

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    with open(USERS_FILE, "w") as f:
        json.dump(users_data, f, indent=4)

    return True

def unbind_phone(phone_number: str):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–∏–≤—è–∑–∫—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    if not USERS_FILE.exists():
        return

    with open(USERS_FILE, "r") as f:
        users_data = json.load(f)

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏, –≥–¥–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
    users_data = {user_id: user_phone for user_id, user_phone in users_data.items() if user_phone != phone_number}
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    with open(USERS_FILE, "w") as f:
        json.dump(users_data, f, indent=4)

def generate_verification_code() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥."""
    return str(random.randint(100000, 999999))

async def send_verification_code(bot, telegram_id: int, code: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π telegram_id."""

    await bot.send_message(
        chat_id=telegram_id,
        text=f"üîê –ö–æ–¥ –¥–ª—è —Å–º–µ–Ω—ã –Ω–æ–º–µ—Ä–∞: {code}"#,
       # reply_markup=approved_keyboard
    )

def delete_phone_from_db(user_id):
    # –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ user_phone_numbers
    user_id = int(user_id)
    if user_id in user_phone_numbers:
        removed_phone = user_phone_numbers.pop(user_id)
        print(f"–ù–æ–º–µ—Ä {removed_phone} —É–¥–∞–ª–µ–Ω –¥–ª—è user_id {user_id}")

def auto_check_in():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç user_id –∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ sessions.json –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é user_phone_numbers."""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    if not SESSIONS_CHECKIN.exists():
        print(f"–§–∞–π–ª {SESSIONS_CHECKIN} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
    with open(SESSIONS_CHECKIN, "r", encoding="utf-8") as f:
        data = json.load(f)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Å—Å–∏—è—Ö
    sessions = data.get("sessions", {})

    # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö user_id –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ user_phone_numbers
    for user_id, user_data in sessions.items():
        phone_number = user_data.get("phone")
        if phone_number:
            user_phone_numbers[int(user_id)] = phone_number  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º user_id –≤ —á–∏—Å–ª–æ

    print(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {user_phone_numbers}")

auto_check_in()