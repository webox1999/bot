import aiohttp
import json
import asyncio
from Clients_bot.config import STATUS_FILE, SERVER_URL, IGNORE_FILE

ORDERS_API = SERVER_URL

async def initialize_orders(client_id: str, phone_number: str):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–∫–∞–∑—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ."""

    url = f"{ORDERS_API}{phone_number}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status != 200:
                return
            data = await response.json()
            orders = data.get("orders", [])

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    order_statuses = load_json(STATUS_FILE)
    ignore_orders = load_json(IGNORE_FILE)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if client_id not in order_statuses:
        order_statuses[client_id] = {}
    if client_id not in ignore_orders:
        ignore_orders[client_id] = {}

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    for order in orders:
        zakaz_id = order["zakaz_id"]
        detail_id = order["detail_id"]
        reorder_detail_id = order.get("reorder_detail_id", "0")  # –ï—Å–ª–∏ –Ω–µ—Ç reorder_detail_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º "0"
        new_status = order["status"]

        # –ï—Å–ª–∏ –¥–µ—Ç–∞–ª—å –±—ã–ª–∞ –ø–µ—Ä–µ–∑–∞–∫–∞–∑–∞–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–µ—Ç–∞–ª–∏
        if reorder_detail_id != "0":
            for existing_zakaz_id, details in order_statuses[client_id].items():
                if reorder_detail_id in details:
                    details[reorder_detail_id] = new_status
                    break
            continue

        # –†–∞–∑–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        if new_status in ["70", "101", "102"]:
            ignore_orders[client_id].setdefault(zakaz_id, {})[detail_id] = new_status
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
            if zakaz_id not in order_statuses[client_id] or detail_id not in order_statuses[client_id].get(zakaz_id, {}):
                order_statuses[client_id].setdefault(zakaz_id, {})[detail_id] = new_status

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    save_json(STATUS_FILE, order_statuses)
    save_json(IGNORE_FILE, ignore_orders)


async def check_orders_status(client_id: str, phone_number: str, user_id: str, bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏."""
    print(f"üîç –ó–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è {phone_number} (client_id: {client_id})")

    url = f"{ORDERS_API}{phone_number}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status != 200:
                return
            data = await response.json()
            orders = data.get("orders", [])

    old_statuses = load_json(STATUS_FILE).get(client_id, {})
    ignore_orders = load_json(IGNORE_FILE).get(client_id, {})

    new_statuses = {}
    new_orders = []
    status_changes = {}
    completed_orders = {}

    for order in orders:
        zakaz_id = order["zakaz_id"]
        detail_id = order["detail_id"]
        reorder_detail_id = order.get("reorder_detail_id", "0")  # –ï—Å–ª–∏ –Ω–µ—Ç reorder_detail_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º "0"
        part_name = order["name"]
        new_status = order["status"]

        # –ï—Å–ª–∏ –¥–µ—Ç–∞–ª—å –±—ã–ª–∞ –ø–µ—Ä–µ–∑–∞–∫–∞–∑–∞–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–µ—Ç–∞–ª–∏
        if reorder_detail_id != "0":
            for existing_zakaz_id, details in old_statuses.items():
                if reorder_detail_id in details:
                    old_status = details[reorder_detail_id]
                    if old_status != new_status:
                        if new_status in ["70", "101", "102"]:
                            completed_orders.setdefault(existing_zakaz_id, []).append((reorder_detail_id, part_name, new_status))
                        else:
                            status_changes.setdefault(existing_zakaz_id, []).append((reorder_detail_id, part_name, new_status))
                    break
            continue

        if zakaz_id in ignore_orders:
            continue

        if zakaz_id not in new_statuses:
            new_statuses[zakaz_id] = {}

        if zakaz_id not in old_statuses or detail_id not in old_statuses.get(zakaz_id, {}):
            new_orders.append((zakaz_id, detail_id, part_name, new_status))
        else:
            old_status = old_statuses[zakaz_id][detail_id]
            if old_status != new_status:
                if new_status in ["70", "101", "102"]:
                    completed_orders.setdefault(zakaz_id, []).append((detail_id, part_name, new_status))
                else:
                    status_changes.setdefault(zakaz_id, []).append((detail_id, part_name, new_status))

        new_statuses[zakaz_id][detail_id] = new_status

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    order_statuses = load_json(STATUS_FILE)
    order_statuses[client_id] = new_statuses
    save_json(STATUS_FILE, order_statuses)

    await send_order_notifications(user_id, new_orders, status_changes, completed_orders, bot)

    # –û–±–Ω–æ–≤–ª—è–µ–º ignore_orders –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    for zakaz_id, details in completed_orders.items():
        ignore_orders[zakaz_id] = {detail_id: status for detail_id, _, status in details}
        ignore_data = load_json(IGNORE_FILE)
        ignore_data[client_id] = ignore_orders
        save_json(IGNORE_FILE, ignore_data)


async def send_order_notifications(user_id: str, new_orders: list, status_changes: dict, completed_orders: dict, bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö, –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤."""
    grouped_orders = {}

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö
    for zakaz_id, detail_id, part_name, status in new_orders:
        grouped_orders.setdefault(zakaz_id, []).append(f"üîπ {part_name} ‚Äì {get_status_text(status)}")

    for zakaz_id, details in grouped_orders.items():
        message = f"üì¶ –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{zakaz_id} –±—ã–ª —Å–æ–∑–¥–∞–Ω:\n" + "\n".join(details)
        await bot.send_message(user_id, message)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
    for zakaz_id, changes in status_changes.items():
        message = f"üì¶ –ó–∞–∫–∞–∑ ‚Ññ{zakaz_id} —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω:\n"
        message += "\n".join([f"üîπ {part} ‚Äì {get_status_text(status)}" for _, part, status in changes])
        await bot.send_message(user_id, message)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤
    for zakaz_id, changes in completed_orders.items():
        message = f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{zakaz_id} –∑–∞–≤–µ—Ä—à—ë–Ω:\n"
        message += "\n".join([f"üîπ {part} ‚Äì {get_status_text(status)}" for _, part, status in changes])
        await bot.send_message(user_id, message)


def load_json(filename):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    try:
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_json(filename, data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON"""
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

def get_status_text(status_code):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"""
    status_dict = {
        "70": "‚úÖ –ó–∞–∫–∞–∑ –≤—ã–¥–∞–Ω",
        "101": "‚ö† –û—Ç–∫–∞–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
        "102": "‚ö† –û—Ç–º–µ–Ω–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.",
        "12": "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è",
        "20": "üöö –ó–∞–∫–∞–∑–∞–Ω —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è –¥–æ—Å—Ç–∞–≤–∫–∞",
        "21": "üöö –ó–∞–∫–∞–∑–∞–Ω —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è –¥–æ—Å—Ç–∞–≤–∫–∞",
        "25": "üöö –¢–æ–≤–∞—Ä –Ω–∞ —Å–∫–ª–∞–¥–µ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞",
        "30": "üöö –í –ø—É—Ç–∏ –Ω–∞ —Å–∫–ª–∞–¥",
        "35": "üöö –í –ø—É—Ç–∏ –Ω–∞ —Å–∫–ª–∞–¥",
        '37': "üì¶ –¢–æ–≤–∞—Ä –ø–æ—Å—Ç—É–ø–∏–ª –Ω–∞ —Å–∫–ª–∞–¥",
        "40": "üì¶ –ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ",
        '41': "‚úÖ –ö–ª–∏–µ–Ω—Ç –æ–ø–æ–≤–µ—â–µ–Ω, —Ç–æ–≤–∞—Ä –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ",
        '1': "üìù –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω",
        '2': "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è",
        '3': "üí∞ –û–ø–ª–∞—á–µ–Ω",
        '10': 'üöö –ó–∞–∫–∞–∑–∞–Ω —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
        '11': 'üöö –ó–∞–∫–∞–∑–∞–Ω —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
        '200': 'üîÑ –û—Ñ–æ—Ä–º–ª–µ–Ω –≤–æ–∑–≤—Ä–∞—Ç',
        '201': 'üîÑ –û—Ñ–æ—Ä–º–ª–µ–Ω –≤–æ–∑–≤—Ä–∞—Ç'
    }
    return status_dict.get(str(status_code), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")